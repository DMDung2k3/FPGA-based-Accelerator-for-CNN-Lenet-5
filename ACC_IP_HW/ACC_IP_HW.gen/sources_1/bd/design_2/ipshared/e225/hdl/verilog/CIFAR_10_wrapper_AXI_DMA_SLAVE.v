// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CIFAR_10_wrapper_AXI_DMA_SLAVE (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        connect_0_din,
        connect_0_num_data_valid,
        connect_0_fifo_cap,
        connect_0_full_n,
        connect_0_write
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
output  [31:0] connect_0_din;
input  [6:0] connect_0_num_data_valid;
input  [6:0] connect_0_fifo_cap;
input   connect_0_full_n;
output   connect_0_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg[31:0] connect_0_din;
reg connect_0_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_stream_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    connect_0_blk_n;
wire   [0:0] icmp_ln41_fu_90_p2;
reg   [0:0] icmp_ln41_reg_155;
reg    ap_block_state1;
wire  signed [31:0] valIn_data_3_fu_96_p1;
reg  signed [31:0] valIn_data_3_reg_159;
reg    ap_block_state2;
wire  signed [31:0] valIn_data_4_fu_101_p1;
reg  signed [31:0] valIn_data_4_reg_164;
reg    ap_block_state3;
wire  signed [31:0] valIn_data_5_fu_106_p1;
reg  signed [31:0] valIn_data_5_reg_170;
reg    ap_block_state4;
wire  signed [31:0] valIn_data_6_fu_111_p1;
reg  signed [31:0] valIn_data_6_reg_176;
reg    ap_block_state5;
wire  signed [31:0] valIn_data_7_fu_116_p1;
reg  signed [31:0] valIn_data_7_reg_182;
reg    ap_block_state6;
wire  signed [31:0] KER_size_0_fu_131_p2;
reg  signed [31:0] KER_size_0_reg_187;
reg    ap_block_state8;
wire  signed [31:0] IFM_size_0_fu_135_p2;
reg  signed [31:0] IFM_size_0_reg_192;
wire  signed [31:0] KER_size_1_fu_139_p2;
reg  signed [31:0] KER_size_1_reg_197;
wire    ap_CS_fsm_state9;
wire   [31:0] KER_bound_fu_143_p2;
reg   [31:0] KER_bound_reg_202;
wire    ap_CS_fsm_state10;
wire  signed [31:0] IFM_size_1_fu_147_p2;
reg  signed [31:0] IFM_size_1_reg_207;
wire    ap_CS_fsm_state13;
wire   [31:0] IFM_bound_fu_151_p2;
reg   [31:0] IFM_bound_reg_212;
wire    ap_CS_fsm_state14;
wire    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start;
wire    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_done;
wire    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_idle;
wire    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_ready;
wire   [31:0] grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_din;
wire    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_write;
wire    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_in_stream_TREADY;
wire    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start;
wire    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_done;
wire    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_idle;
wire    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_ready;
wire   [31:0] grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_din;
wire    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_write;
wire    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_in_stream_TREADY;
reg    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start_reg;
wire    ap_CS_fsm_state15;
reg    ap_block_state7;
wire   [31:0] valIn_data_2_fu_85_p1;
wire   [31:0] valIn_data_fu_121_p1;
wire   [31:0] valIn_data_1_fu_126_p1;
reg    ap_block_state12_on_subcall_done;
reg   [14:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    regslice_both_in_stream_U_apdone_blk;
wire   [63:0] in_stream_TDATA_int_regslice;
wire    in_stream_TVALID_int_regslice;
reg    in_stream_TREADY_int_regslice;
wire    regslice_both_in_stream_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 15'd1;
#0 grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start_reg = 1'b0;
#0 grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start_reg = 1'b0;
end

CIFAR_10_wrapper_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2 grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start),
    .ap_done(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_done),
    .ap_idle(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_idle),
    .ap_ready(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_ready),
    .in_stream_TVALID(in_stream_TVALID_int_regslice),
    .connect_0_din(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_din),
    .connect_0_num_data_valid(7'd0),
    .connect_0_fifo_cap(7'd0),
    .connect_0_full_n(connect_0_full_n),
    .connect_0_write(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_write),
    .KER_bound(KER_bound_reg_202),
    .in_stream_TDATA(in_stream_TDATA_int_regslice),
    .in_stream_TREADY(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_in_stream_TREADY)
);

CIFAR_10_wrapper_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1 grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start),
    .ap_done(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_done),
    .ap_idle(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_idle),
    .ap_ready(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_ready),
    .in_stream_TVALID(in_stream_TVALID_int_regslice),
    .connect_0_din(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_din),
    .connect_0_num_data_valid(7'd0),
    .connect_0_fifo_cap(7'd0),
    .connect_0_full_n(connect_0_full_n),
    .connect_0_write(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_write),
    .IFM_bound(IFM_bound_reg_212),
    .in_stream_TDATA(in_stream_TDATA_int_regslice),
    .in_stream_TREADY(grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_in_stream_TREADY)
);

CIFAR_10_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U7(
    .din0(valIn_data_7_reg_182),
    .din1(valIn_data_4_reg_164),
    .dout(KER_size_0_fu_131_p2)
);

CIFAR_10_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U8(
    .din0(valIn_data_6_reg_176),
    .din1(valIn_data_5_reg_170),
    .dout(IFM_size_0_fu_135_p2)
);

CIFAR_10_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U9(
    .din0(KER_size_0_reg_187),
    .din1(valIn_data_4_reg_164),
    .dout(KER_size_1_fu_139_p2)
);

CIFAR_10_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U10(
    .din0(KER_size_1_reg_197),
    .din1(valIn_data_5_reg_170),
    .dout(KER_bound_fu_143_p2)
);

CIFAR_10_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U11(
    .din0(IFM_size_0_reg_192),
    .din1(valIn_data_6_reg_176),
    .dout(IFM_size_1_fu_147_p2)
);

CIFAR_10_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U12(
    .din0(IFM_size_1_reg_207),
    .din1(valIn_data_3_reg_159),
    .dout(IFM_bound_fu_151_p2)
);

CIFAR_10_wrapper_regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_stream_TDATA),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_U_ack_in),
    .data_out(in_stream_TDATA_int_regslice),
    .vld_out(in_stream_TVALID_int_regslice),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_ready == 1'b1)) begin
            grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start_reg <= 1'b1;
        end else if ((grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_ready == 1'b1)) begin
            grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        IFM_bound_reg_212 <= IFM_bound_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8))) begin
        IFM_size_0_reg_192 <= IFM_size_0_fu_135_p2;
        KER_size_0_reg_187 <= KER_size_0_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        IFM_size_1_reg_207 <= IFM_size_1_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        KER_bound_reg_202 <= KER_bound_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        KER_size_1_reg_197 <= KER_size_1_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        icmp_ln41_reg_155 <= icmp_ln41_fu_90_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2))) begin
        valIn_data_3_reg_159 <= valIn_data_3_fu_96_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3))) begin
        valIn_data_4_reg_164 <= valIn_data_4_fu_101_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
        valIn_data_5_reg_170 <= valIn_data_5_fu_106_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
        valIn_data_6_reg_176 <= valIn_data_6_fu_111_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6))) begin
        valIn_data_7_reg_182 <= valIn_data_7_fu_116_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state12_on_subcall_done)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state5)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state6)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state7)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state8)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        connect_0_blk_n = connect_0_full_n;
    end else begin
        connect_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8))) begin
        connect_0_din = valIn_data_1_fu_126_p1;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7))) begin
        connect_0_din = valIn_data_fu_121_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6))) begin
        connect_0_din = valIn_data_7_fu_116_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
        connect_0_din = valIn_data_6_fu_111_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
        connect_0_din = valIn_data_5_fu_106_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3))) begin
        connect_0_din = valIn_data_4_fu_101_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2))) begin
        connect_0_din = valIn_data_3_fu_96_p1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        connect_0_din = valIn_data_2_fu_85_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln41_reg_155 == 1'd1))) begin
        connect_0_din = grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_din;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln41_reg_155 == 1'd0))) begin
        connect_0_din = grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_din;
    end else begin
        connect_0_din = grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_din;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7)) | ((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6)) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5)) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4)) | ((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2)) | ((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1)) | ((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8)))) begin
        connect_0_write = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln41_reg_155 == 1'd1))) begin
        connect_0_write = grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_write;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln41_reg_155 == 1'd0))) begin
        connect_0_write = grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_write;
    end else begin
        connect_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_stream_TDATA_blk_n = in_stream_TVALID_int_regslice;
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7)) | ((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6)) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5)) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4)) | ((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2)) | ((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1)) | ((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8)))) begin
        in_stream_TREADY_int_regslice = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln41_reg_155 == 1'd1))) begin
        in_stream_TREADY_int_regslice = grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_in_stream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln41_reg_155 == 1'd0))) begin
        in_stream_TREADY_int_regslice = grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_in_stream_TREADY;
    end else begin
        in_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8) & (icmp_ln41_reg_155 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8) & (icmp_ln41_reg_155 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((connect_0_full_n == 1'b0) | (in_stream_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state12_on_subcall_done = (((grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_done == 1'b0) & (icmp_ln41_reg_155 == 1'd1)) | ((grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_done == 1'b0) & (icmp_ln41_reg_155 == 1'd0)));
end

always @ (*) begin
    ap_block_state2 = ((connect_0_full_n == 1'b0) | (in_stream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((connect_0_full_n == 1'b0) | (in_stream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((connect_0_full_n == 1'b0) | (in_stream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((connect_0_full_n == 1'b0) | (in_stream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((connect_0_full_n == 1'b0) | (in_stream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((connect_0_full_n == 1'b0) | (in_stream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((connect_0_full_n == 1'b0) | (in_stream_TVALID_int_regslice == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start = grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start_reg;

assign grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start = grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start_reg;

assign icmp_ln41_fu_90_p2 = ((valIn_data_2_fu_85_p1 == 32'd0) ? 1'b1 : 1'b0);

assign in_stream_TREADY = regslice_both_in_stream_U_ack_in;

assign start_out = real_start;

assign valIn_data_1_fu_126_p1 = in_stream_TDATA_int_regslice[31:0];

assign valIn_data_2_fu_85_p1 = in_stream_TDATA_int_regslice[31:0];

assign valIn_data_3_fu_96_p1 = in_stream_TDATA_int_regslice[31:0];

assign valIn_data_4_fu_101_p1 = in_stream_TDATA_int_regslice[31:0];

assign valIn_data_5_fu_106_p1 = in_stream_TDATA_int_regslice[31:0];

assign valIn_data_6_fu_111_p1 = in_stream_TDATA_int_regslice[31:0];

assign valIn_data_7_fu_116_p1 = in_stream_TDATA_int_regslice[31:0];

assign valIn_data_fu_121_p1 = in_stream_TDATA_int_regslice[31:0];

endmodule //CIFAR_10_wrapper_AXI_DMA_SLAVE
