// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CIFAR_10_wrapper_SCIG_5u_32u_8u_64u_8u_2u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        connect_6_dout,
        connect_6_num_data_valid,
        connect_6_fifo_cap,
        connect_6_empty_n,
        connect_6_read,
        connect_7_din,
        connect_7_num_data_valid,
        connect_7_fifo_cap,
        connect_7_full_n,
        connect_7_write
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] connect_6_dout;
input  [6:0] connect_6_num_data_valid;
input  [6:0] connect_6_fifo_cap;
input   connect_6_empty_n;
output   connect_6_read;
output  [31:0] connect_7_din;
input  [6:0] connect_7_num_data_valid;
input  [6:0] connect_7_fifo_cap;
input   connect_7_full_n;
output   connect_7_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg connect_6_read;
reg[31:0] connect_7_din;
reg connect_7_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    connect_6_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    connect_7_blk_n;
wire   [0:0] icmp_ln100_fu_95_p2;
reg   [0:0] icmp_ln100_reg_113;
reg    ap_block_state1;
reg  signed [31:0] valIn_40_reg_117;
reg    ap_block_state2;
reg  signed [31:0] valIn_41_reg_122;
reg    ap_block_state3;
reg  signed [31:0] valIn_42_reg_128;
reg    ap_block_state4;
reg  signed [31:0] valIn_43_reg_133;
reg    ap_block_state6;
wire  signed [31:0] KER_size_0_fu_101_p2;
reg  signed [31:0] KER_size_0_reg_138;
reg    ap_block_state8;
wire  signed [31:0] KER_size_1_fu_105_p2;
reg  signed [31:0] KER_size_1_reg_143;
wire    ap_CS_fsm_state9;
wire   [31:0] KER_bound_fu_109_p2;
reg   [31:0] KER_bound_reg_148;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_89_p2;
reg   [31:0] mul36_reg_153;
wire    ap_CS_fsm_state13;
wire   [15:0] inElem_q0;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_start;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_done;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_idle;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_ready;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_connect_6_read;
wire   [31:0] grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_connect_7_din;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_connect_7_write;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_start;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_done;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_idle;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_ready;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_connect_6_read;
wire   [31:0] grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_connect_7_din;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_connect_7_write;
wire   [7:0] grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_address0;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_ce0;
wire   [7:0] grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_address1;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_ce1;
wire    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_we1;
wire   [15:0] grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_d1;
reg    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_start_reg;
wire    ap_CS_fsm_state14;
reg    ap_block_state5;
reg    ap_block_state7;
wire   [11:0] grp_fu_89_p1;
reg    grp_fu_89_ce;
reg    ap_block_state12_on_subcall_done;
reg   [13:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 14'd1;
#0 grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_start_reg = 1'b0;
#0 grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_start_reg = 1'b0;
end

CIFAR_10_wrapper_SCIG_5u_3u_32u_32u_32u_2u_s_inElem_RAM_S2P_LUTRAM_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
inElem_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_address0),
    .ce0(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_ce0),
    .q0(inElem_q0),
    .address1(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_address1),
    .ce1(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_ce1),
    .we1(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_we1),
    .d1(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_d1)
);

CIFAR_10_wrapper_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6 grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_start),
    .ap_done(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_done),
    .ap_idle(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_idle),
    .ap_ready(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_ready),
    .connect_6_dout(connect_6_dout),
    .connect_6_num_data_valid(7'd0),
    .connect_6_fifo_cap(7'd0),
    .connect_6_empty_n(connect_6_empty_n),
    .connect_6_read(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_connect_6_read),
    .connect_7_din(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_connect_7_din),
    .connect_7_num_data_valid(7'd0),
    .connect_7_fifo_cap(7'd0),
    .connect_7_full_n(connect_7_full_n),
    .connect_7_write(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_connect_7_write),
    .KER_bound(KER_bound_reg_148)
);

CIFAR_10_wrapper_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1 grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_start),
    .ap_done(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_done),
    .ap_idle(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_idle),
    .ap_ready(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_ready),
    .connect_6_dout(connect_6_dout),
    .connect_6_num_data_valid(7'd0),
    .connect_6_fifo_cap(7'd0),
    .connect_6_empty_n(connect_6_empty_n),
    .connect_6_read(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_connect_6_read),
    .connect_7_din(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_connect_7_din),
    .connect_7_num_data_valid(7'd0),
    .connect_7_fifo_cap(7'd0),
    .connect_7_full_n(connect_7_full_n),
    .connect_7_write(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_connect_7_write),
    .mul36(mul36_reg_153),
    .inElem_address0(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_address0),
    .inElem_ce0(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_ce0),
    .inElem_q0(inElem_q0),
    .inElem_address1(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_address1),
    .inElem_ce1(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_ce1),
    .inElem_we1(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_we1),
    .inElem_d1(grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_inElem_d1)
);

CIFAR_10_wrapper_mul_32s_12ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 32 ))
mul_32s_12ns_32_2_1_U659(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(valIn_40_reg_117),
    .din1(grp_fu_89_p1),
    .ce(grp_fu_89_ce),
    .dout(grp_fu_89_p2)
);

CIFAR_10_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U660(
    .din0(valIn_43_reg_133),
    .din1(valIn_41_reg_122),
    .dout(KER_size_0_fu_101_p2)
);

CIFAR_10_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U661(
    .din0(valIn_41_reg_122),
    .din1(KER_size_0_reg_138),
    .dout(KER_size_1_fu_105_p2)
);

CIFAR_10_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U662(
    .din0(valIn_42_reg_128),
    .din1(KER_size_1_reg_143),
    .dout(KER_bound_fu_109_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_start_reg <= 1'b1;
        end else if ((grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_ready == 1'b1)) begin
            grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_start_reg <= 1'b1;
        end else if ((grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_ready == 1'b1)) begin
            grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        KER_bound_reg_148 <= KER_bound_fu_109_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8))) begin
        KER_size_0_reg_138 <= KER_size_0_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        KER_size_1_reg_143 <= KER_size_1_fu_105_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        icmp_ln100_reg_113 <= icmp_ln100_fu_95_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mul36_reg_153 <= grp_fu_89_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2))) begin
        valIn_40_reg_117 <= connect_6_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3))) begin
        valIn_41_reg_122 <= connect_6_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
        valIn_42_reg_128 <= connect_6_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6))) begin
        valIn_43_reg_133 <= connect_6_dout;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state12_on_subcall_done)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state5)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state6)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state7)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state8)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        connect_6_blk_n = connect_6_empty_n;
    end else begin
        connect_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6)) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5)) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4)) | ((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2)) | ((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1)) | ((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8)) | ((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7)))) begin
        connect_6_read = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        connect_6_read = grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_connect_6_read;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln100_reg_113 == 1'd0))) begin
        connect_6_read = grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_connect_6_read;
    end else begin
        connect_6_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        connect_7_blk_n = connect_7_full_n;
    end else begin
        connect_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6)) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5)) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4)) | ((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2)) | ((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1)) | ((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8)) | ((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7)))) begin
        connect_7_din = connect_6_dout;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        connect_7_din = grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_connect_7_din;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln100_reg_113 == 1'd0))) begin
        connect_7_din = grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_connect_7_din;
    end else begin
        connect_7_din = grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_connect_7_din;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6)) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5)) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4)) | ((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2)) | ((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1)) | ((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8)) | ((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7)))) begin
        connect_7_write = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        connect_7_write = grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_connect_7_write;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln100_reg_113 == 1'd0))) begin
        connect_7_write = grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_connect_7_write;
    end else begin
        connect_7_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8)))) begin
        grp_fu_89_ce = 1'b1;
    end else begin
        grp_fu_89_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8) & (icmp_ln100_reg_113 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8) & (icmp_ln100_reg_113 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((connect_7_full_n == 1'b0) | (connect_6_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state12_on_subcall_done = ((grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_done == 1'b0) & (icmp_ln100_reg_113 == 1'd0));
end

always @ (*) begin
    ap_block_state2 = ((connect_7_full_n == 1'b0) | (connect_6_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((connect_7_full_n == 1'b0) | (connect_6_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((connect_7_full_n == 1'b0) | (connect_6_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((connect_7_full_n == 1'b0) | (connect_6_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((connect_7_full_n == 1'b0) | (connect_6_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((connect_7_full_n == 1'b0) | (connect_6_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((connect_7_full_n == 1'b0) | (connect_6_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_start = grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_123_1_fu_79_ap_start_reg;

assign grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_start = grp_SCIG_5u_32u_8u_64u_8u_2u_Pipeline_VITIS_LOOP_189_6_fu_70_ap_start_reg;

assign grp_fu_89_p1 = 32'd1672;

assign icmp_ln100_fu_95_p2 = ((connect_6_dout == 32'd0) ? 1'b1 : 1'b0);

assign start_out = real_start;

endmodule //CIFAR_10_wrapper_SCIG_5u_32u_8u_64u_8u_2u_s
