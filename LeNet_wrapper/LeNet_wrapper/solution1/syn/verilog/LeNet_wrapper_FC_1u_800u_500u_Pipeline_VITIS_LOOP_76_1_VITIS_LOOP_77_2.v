// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module LeNet_wrapper_FC_1u_800u_500u_Pipeline_VITIS_LOOP_76_1_VITIS_LOOP_77_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        connect_6_dout,
        connect_6_num_data_valid,
        connect_6_fifo_cap,
        connect_6_empty_n,
        connect_6_read,
        connect_7_din,
        connect_7_num_data_valid,
        connect_7_fifo_cap,
        connect_7_full_n,
        connect_7_write,
        valIn_a_41,
        mul_ln73_1,
        B_address1,
        B_ce1,
        B_we1,
        B_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] connect_6_dout;
input  [6:0] connect_6_num_data_valid;
input  [6:0] connect_6_fifo_cap;
input   connect_6_empty_n;
output   connect_6_read;
output  [31:0] connect_7_din;
input  [6:0] connect_7_num_data_valid;
input  [6:0] connect_7_fifo_cap;
input   connect_7_full_n;
output   connect_7_write;
input  [31:0] valIn_a_41;
input  [31:0] mul_ln73_1;
output  [18:0] B_address1;
output   B_ce1;
output   B_we1;
output  [7:0] B_d1;

reg ap_idle;
reg connect_6_read;
reg connect_7_write;
reg B_ce1;
reg B_we1;
reg[7:0] B_d1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg   [0:0] or_ln79_reg_317;
reg   [0:0] or_ln79_reg_317_pp0_iter3_reg;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln76_fu_144_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    connect_6_blk_n;
wire    ap_block_pp0_stage0;
reg    connect_7_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] select_ln76_fu_174_p3;
reg   [9:0] select_ln76_reg_307;
reg   [9:0] select_ln76_reg_307_pp0_iter2_reg;
wire   [0:0] or_ln79_fu_224_p2;
reg   [0:0] or_ln79_reg_317_pp0_iter2_reg;
wire   [63:0] zext_ln81_2_fu_254_p1;
reg   [9:0] j_fu_70;
wire   [9:0] add_ln77_fu_230_p2;
wire    ap_loop_init;
reg   [8:0] i_14_fu_74;
wire   [8:0] select_ln76_1_fu_182_p3;
reg   [18:0] indvar_flatten_fu_78;
wire   [18:0] add_ln76_1_fu_150_p2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] trunc_ln81_fu_258_p1;
wire   [0:0] icmp_ln77_fu_168_p2;
wire   [8:0] add_ln76_fu_162_p2;
wire   [31:0] zext_ln76_fu_194_p1;
wire   [0:0] ult_fu_198_p2;
wire   [31:0] zext_ln77_fu_209_p1;
wire   [0:0] icmp_ln79_fu_213_p2;
wire   [0:0] xor_ln79_fu_218_p2;
wire   [0:0] rev_fu_203_p2;
wire   [18:0] grp_fu_263_p3;
wire   [8:0] grp_fu_263_p0;
wire   [9:0] grp_fu_263_p1;
wire   [9:0] grp_fu_263_p2;
reg    grp_fu_263_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [18:0] grp_fu_263_p00;
wire   [18:0] grp_fu_263_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 j_fu_70 = 10'd0;
#0 i_14_fu_74 = 9'd0;
#0 indvar_flatten_fu_78 = 19'd0;
#0 ap_done_reg = 1'b0;
end

LeNet_wrapper_mac_muladd_9ns_10ns_10ns_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
mac_muladd_9ns_10ns_10ns_19_4_1_U354(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_263_p0),
    .din1(grp_fu_263_p1),
    .din2(grp_fu_263_p2),
    .ce(grp_fu_263_ce),
    .dout(grp_fu_263_p3)
);

LeNet_wrapper_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_14_fu_74 <= 9'd0;
        end else if (((icmp_ln76_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_14_fu_74 <= select_ln76_1_fu_182_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_78 <= 19'd0;
        end else if (((icmp_ln76_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_78 <= add_ln76_1_fu_150_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_70 <= 10'd0;
        end else if (((icmp_ln76_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_70 <= add_ln77_fu_230_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        or_ln79_reg_317 <= or_ln79_fu_224_p2;
        select_ln76_reg_307 <= select_ln76_fu_174_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        or_ln79_reg_317_pp0_iter2_reg <= or_ln79_reg_317;
        or_ln79_reg_317_pp0_iter3_reg <= or_ln79_reg_317_pp0_iter2_reg;
        select_ln76_reg_307_pp0_iter2_reg <= select_ln76_reg_307;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (or_ln79_reg_317_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (or_ln79_reg_317_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        B_ce1 = 1'b1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        if ((or_ln79_reg_317_pp0_iter3_reg == 1'd1)) begin
            B_d1 = 8'd0;
        end else if ((or_ln79_reg_317_pp0_iter3_reg == 1'd0)) begin
            B_d1 = trunc_ln81_fu_258_p1;
        end else begin
            B_d1 = 'bx;
        end
    end else begin
        B_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (or_ln79_reg_317_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (or_ln79_reg_317_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        B_we1 = 1'b1;
    end else begin
        B_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln76_fu_144_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_ln79_reg_317_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        connect_6_blk_n = connect_6_empty_n;
    end else begin
        connect_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln79_reg_317_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        connect_6_read = 1'b1;
    end else begin
        connect_6_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_ln79_reg_317_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        connect_7_blk_n = connect_7_full_n;
    end else begin
        connect_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln79_reg_317_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        connect_7_write = 1'b1;
    end else begin
        connect_7_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_263_ce = 1'b1;
    end else begin
        grp_fu_263_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_address1 = zext_ln81_2_fu_254_p1;

assign add_ln76_1_fu_150_p2 = (indvar_flatten_fu_78 + 19'd1);

assign add_ln76_fu_162_p2 = (i_14_fu_74 + 9'd1);

assign add_ln77_fu_230_p2 = (select_ln76_fu_174_p3 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (((connect_7_full_n == 1'b0) & (or_ln79_reg_317_pp0_iter3_reg == 1'd0)) | ((or_ln79_reg_317_pp0_iter3_reg == 1'd0) & (connect_6_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign connect_7_din = connect_6_dout;

assign grp_fu_263_p0 = grp_fu_263_p00;

assign grp_fu_263_p00 = select_ln76_1_fu_182_p3;

assign grp_fu_263_p1 = 19'd800;

assign grp_fu_263_p2 = grp_fu_263_p20;

assign grp_fu_263_p20 = select_ln76_reg_307_pp0_iter2_reg;

assign icmp_ln76_fu_144_p2 = ((indvar_flatten_fu_78 == 19'd400000) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_168_p2 = ((j_fu_70 == 10'd800) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_213_p2 = ((zext_ln77_fu_209_p1 < mul_ln73_1) ? 1'b1 : 1'b0);

assign or_ln79_fu_224_p2 = (xor_ln79_fu_218_p2 | rev_fu_203_p2);

assign rev_fu_203_p2 = (ult_fu_198_p2 ^ 1'd1);

assign select_ln76_1_fu_182_p3 = ((icmp_ln77_fu_168_p2[0:0] == 1'b1) ? add_ln76_fu_162_p2 : i_14_fu_74);

assign select_ln76_fu_174_p3 = ((icmp_ln77_fu_168_p2[0:0] == 1'b1) ? 10'd0 : j_fu_70);

assign trunc_ln81_fu_258_p1 = connect_6_dout[7:0];

assign ult_fu_198_p2 = ((zext_ln76_fu_194_p1 < valIn_a_41) ? 1'b1 : 1'b0);

assign xor_ln79_fu_218_p2 = (icmp_ln79_fu_213_p2 ^ 1'd1);

assign zext_ln76_fu_194_p1 = select_ln76_1_fu_182_p3;

assign zext_ln77_fu_209_p1 = select_ln76_fu_174_p3;

assign zext_ln81_2_fu_254_p1 = grp_fu_263_p3;

endmodule //LeNet_wrapper_FC_1u_800u_500u_Pipeline_VITIS_LOOP_76_1_VITIS_LOOP_77_2
