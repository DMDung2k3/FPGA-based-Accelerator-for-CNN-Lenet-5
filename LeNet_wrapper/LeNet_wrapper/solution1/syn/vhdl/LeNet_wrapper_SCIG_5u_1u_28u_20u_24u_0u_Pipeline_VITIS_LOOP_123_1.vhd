-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LeNet_wrapper_SCIG_5u_1u_28u_20u_24u_0u_Pipeline_VITIS_LOOP_123_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    connect_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    connect_0_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    connect_0_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    connect_0_empty_n : IN STD_LOGIC;
    connect_0_read : OUT STD_LOGIC;
    connect_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    connect_1_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    connect_1_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    connect_1_full_n : IN STD_LOGIC;
    connect_1_write : OUT STD_LOGIC;
    mul36 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of LeNet_wrapper_SCIG_5u_1u_28u_20u_24u_0u_Pipeline_VITIS_LOOP_123_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_310 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100010000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln123_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_reg_627 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln129_reg_631 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op107_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal icmp_ln153_reg_639 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_reg_639_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln123_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal connect_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal connect_1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal inp_8_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln126_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln129_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln145_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_reg_639_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal input_ind_fu_394_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_ind_reg_643 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_ind_reg_643_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln163_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln169_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputBuf_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal inputBuf_ce0 : STD_LOGIC;
    signal inputBuf_we0 : STD_LOGIC;
    signal inputBuf_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal inputBuf_ce1 : STD_LOGIC;
    signal inputBuf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_inp_1_phi_fu_137_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_9_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_inp_1_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_inp_6_phi_fu_148_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_10_fu_487_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_inp_6_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_168_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln137_fu_529_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_reg_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_reg_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_reg_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln141_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln159_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_14_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal oy_fu_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal oy_4_fu_496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ox_fu_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ox_2_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ky_fu_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ky_2_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_i_fu_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal inp_i_8_fu_329_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_fu_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kx_fu_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kx_2_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_j_fu_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal inp_j_5_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln129_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_2_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inp_i_7_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln148_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln123_6_fu_264_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln123_5_fu_260_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln156_fu_356_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln156_fu_362_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_366_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln156_1_fu_374_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln123_fu_252_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln156_fu_382_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln156_1_fu_388_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln123_4_fu_256_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal oy_3_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln172_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op113_store_state3 : BOOLEAN;
    signal ap_enable_operation_113 : BOOLEAN;
    signal ap_enable_state3_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_116 : BOOLEAN;
    signal ap_enable_state4_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_117 : BOOLEAN;
    signal ap_enable_state5_pp0_iter4_stage0 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_239 : BOOLEAN;
    signal ap_condition_179 : BOOLEAN;
    signal ap_condition_516 : BOOLEAN;
    signal ap_condition_522 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component LeNet_wrapper_SCIG_5u_1u_28u_20u_24u_0u_Pipeline_VITIS_LOOP_123_1_inputBuf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component LeNet_wrapper_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    inputBuf_U : component LeNet_wrapper_SCIG_5u_1u_28u_20u_24u_0u_Pipeline_VITIS_LOOP_123_1_inputBuf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 10500,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputBuf_address0,
        ce0 => inputBuf_ce0,
        we0 => inputBuf_we0,
        d0 => ap_phi_mux_storemerge_phi_fu_168_p4,
        address1 => inputBuf_address1,
        ce1 => inputBuf_ce1,
        q1 => inputBuf_q1);

    flow_control_loop_pipe_sequential_init_U : component LeNet_wrapper_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_storemerge_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_179)) then
                if ((ap_const_boolean_1 = ap_condition_239)) then 
                    ap_phi_reg_pp0_iter2_storemerge_reg_164 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_storemerge_reg_164 <= ap_phi_reg_pp0_iter1_storemerge_reg_164;
                end if;
            end if; 
        end if;
    end process;

    i_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_56 <= ap_const_lv32_0;
                elsif (((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_56 <= i_14_fu_234_p2;
                end if;
            end if; 
        end if;
    end process;

    inp_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    inp_fu_76 <= ap_const_lv32_0;
                elsif (((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    inp_fu_76 <= ap_phi_mux_inp_6_phi_fu_148_p10;
                end if;
            end if; 
        end if;
    end process;

    inp_i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    inp_i_fu_72 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_516)) then 
                    inp_i_fu_72 <= inp_i_8_fu_329_p3;
                end if;
            end if; 
        end if;
    end process;

    inp_j_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln145_fu_306_p2 = ap_const_lv1_1) and (icmp_ln126_fu_268_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                inp_j_fu_84 <= ap_const_lv32_0;
            elsif (((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln145_fu_306_p2 = ap_const_lv1_0) and (icmp_ln126_fu_268_p2 = ap_const_lv1_1))) then 
                inp_j_fu_84 <= inp_j_5_fu_300_p2;
            end if; 
        end if;
    end process;

    kx_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln169_fu_451_p2 = ap_const_lv1_0) and (icmp_ln166_fu_426_p2 = ap_const_lv1_1) and (icmp_ln163_fu_406_p2 = ap_const_lv1_1) and (icmp_ln153_fu_347_p2 = ap_const_lv1_1)) or ((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln166_fu_426_p2 = ap_const_lv1_0) and (icmp_ln163_fu_406_p2 = ap_const_lv1_1) and (icmp_ln153_fu_347_p2 = ap_const_lv1_1)) or ((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln169_fu_451_p2 = ap_const_lv1_1) and (icmp_ln166_fu_426_p2 = ap_const_lv1_1) and (icmp_ln163_fu_406_p2 = ap_const_lv1_1) and (icmp_ln153_fu_347_p2 
    = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                kx_fu_80 <= ap_const_lv32_0;
            elsif (((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln163_fu_406_p2 = ap_const_lv1_0) and (icmp_ln153_fu_347_p2 = ap_const_lv1_1))) then 
                kx_fu_80 <= kx_2_fu_400_p2;
            end if; 
        end if;
    end process;

    ky_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln166_fu_426_p2 = ap_const_lv1_1) and (icmp_ln163_fu_406_p2 = ap_const_lv1_1) and (icmp_ln153_fu_347_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                ky_fu_68 <= ap_const_lv32_0;
            elsif (((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln166_fu_426_p2 = ap_const_lv1_0) and (icmp_ln163_fu_406_p2 = ap_const_lv1_1) and (icmp_ln153_fu_347_p2 = ap_const_lv1_1))) then 
                ky_fu_68 <= ky_2_fu_420_p2;
            end if; 
        end if;
    end process;

    ox_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln169_fu_451_p2 = ap_const_lv1_1) and (icmp_ln166_fu_426_p2 = ap_const_lv1_1) and (icmp_ln163_fu_406_p2 = ap_const_lv1_1) and (icmp_ln153_fu_347_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                ox_fu_64 <= ap_const_lv32_0;
            elsif (((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln169_fu_451_p2 = ap_const_lv1_0) and (icmp_ln166_fu_426_p2 = ap_const_lv1_1) and (icmp_ln163_fu_406_p2 = ap_const_lv1_1) and (icmp_ln153_fu_347_p2 = ap_const_lv1_1))) then 
                ox_fu_64 <= ox_2_fu_445_p2;
            end if; 
        end if;
    end process;

    oy_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    oy_fu_60 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_522)) then 
                    oy_fu_60 <= oy_4_fu_496_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln123_reg_623 <= icmp_ln123_fu_229_p2;
                icmp_ln126_reg_627 <= icmp_ln126_fu_268_p2;
                icmp_ln153_reg_639 <= icmp_ln153_fu_347_p2;
                inp_8_reg_618 <= inp_fu_76;
                input_ind_reg_643 <= input_ind_fu_394_p2;
                or_ln129_reg_631 <= or_ln129_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln153_reg_639_pp0_iter2_reg <= icmp_ln153_reg_639;
                icmp_ln153_reg_639_pp0_iter3_reg <= icmp_ln153_reg_639_pp0_iter2_reg;
                input_ind_reg_643_pp0_iter2_reg <= input_ind_reg_643;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_storemerge_reg_164 <= ap_phi_reg_pp0_iter0_storemerge_reg_164;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln156_1_fu_388_p2 <= std_logic_vector(unsigned(trunc_ln123_fu_252_p1) + unsigned(sub_ln156_fu_382_p2));
    add_ln156_fu_356_p2 <= std_logic_vector(unsigned(trunc_ln123_6_fu_264_p1) + unsigned(trunc_ln123_5_fu_260_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(connect_0_empty_n, ap_predicate_op107_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_predicate_op107_read_state3 = ap_const_boolean_1) and (connect_0_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(connect_1_full_n, icmp_ln153_reg_639_pp0_iter3_reg)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((icmp_ln153_reg_639_pp0_iter3_reg = ap_const_lv1_1) and (connect_1_full_n = ap_const_logic_0));
    end process;


    ap_condition_179_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_179 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_239_assign_proc : process(icmp_ln123_fu_229_p2, icmp_ln126_fu_268_p2, or_ln129_fu_286_p2)
    begin
                ap_condition_239 <= ((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (or_ln129_fu_286_p2 = ap_const_lv1_1) and (icmp_ln126_fu_268_p2 = ap_const_lv1_1));
    end process;


    ap_condition_516_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln123_fu_229_p2, icmp_ln126_fu_268_p2, icmp_ln145_fu_306_p2)
    begin
                ap_condition_516 <= ((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln145_fu_306_p2 = ap_const_lv1_1) and (icmp_ln126_fu_268_p2 = ap_const_lv1_1));
    end process;


    ap_condition_522_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln123_fu_229_p2, icmp_ln153_fu_347_p2, icmp_ln163_fu_406_p2, icmp_ln166_fu_426_p2, icmp_ln169_fu_451_p2)
    begin
                ap_condition_522 <= ((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln169_fu_451_p2 = ap_const_lv1_1) and (icmp_ln166_fu_426_p2 = ap_const_lv1_1) and (icmp_ln163_fu_406_p2 = ap_const_lv1_1) and (icmp_ln153_fu_347_p2 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln123_fu_229_p2)
    begin
        if (((icmp_ln123_fu_229_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_113_assign_proc : process(ap_predicate_op113_store_state3)
    begin
                ap_enable_operation_113 <= (ap_predicate_op113_store_state3 = ap_const_boolean_1);
    end process;


    ap_enable_operation_116_assign_proc : process(icmp_ln153_reg_639_pp0_iter2_reg)
    begin
                ap_enable_operation_116 <= (icmp_ln153_reg_639_pp0_iter2_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_117_assign_proc : process(icmp_ln153_reg_639_pp0_iter3_reg)
    begin
                ap_enable_operation_117 <= (icmp_ln153_reg_639_pp0_iter3_reg = ap_const_lv1_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state3_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state3_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state4_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state5_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state5_pp0_iter4_stage0 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_inp_1_phi_fu_137_p6_assign_proc : process(icmp_ln123_fu_229_p2, icmp_ln126_fu_268_p2, icmp_ln145_fu_306_p2, inp_9_fu_292_p2, ap_phi_reg_pp0_iter1_inp_1_reg_134, inp_fu_76)
    begin
        if (((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (icmp_ln126_fu_268_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_inp_1_phi_fu_137_p6 <= inp_fu_76;
        elsif ((((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (icmp_ln145_fu_306_p2 = ap_const_lv1_0) and (icmp_ln126_fu_268_p2 = ap_const_lv1_1)) or ((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (icmp_ln145_fu_306_p2 = ap_const_lv1_1) and (icmp_ln126_fu_268_p2 = ap_const_lv1_1)))) then 
            ap_phi_mux_inp_1_phi_fu_137_p6 <= inp_9_fu_292_p2;
        else 
            ap_phi_mux_inp_1_phi_fu_137_p6 <= ap_phi_reg_pp0_iter1_inp_1_reg_134;
        end if; 
    end process;


    ap_phi_mux_inp_6_phi_fu_148_p10_assign_proc : process(icmp_ln123_fu_229_p2, icmp_ln153_fu_347_p2, icmp_ln163_fu_406_p2, icmp_ln166_fu_426_p2, icmp_ln169_fu_451_p2, ap_phi_mux_inp_1_phi_fu_137_p6, inp_10_fu_487_p3, ap_phi_reg_pp0_iter1_inp_6_reg_145)
    begin
        if ((((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (icmp_ln169_fu_451_p2 = ap_const_lv1_0) and (icmp_ln166_fu_426_p2 = ap_const_lv1_1) and (icmp_ln163_fu_406_p2 = ap_const_lv1_1) and (icmp_ln153_fu_347_p2 = ap_const_lv1_1)) or ((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (icmp_ln166_fu_426_p2 = ap_const_lv1_0) and (icmp_ln163_fu_406_p2 = ap_const_lv1_1) and (icmp_ln153_fu_347_p2 = ap_const_lv1_1)) or ((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (icmp_ln163_fu_406_p2 = ap_const_lv1_0) and (icmp_ln153_fu_347_p2 = ap_const_lv1_1)) or ((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (icmp_ln153_fu_347_p2 = ap_const_lv1_0)))) then 
            ap_phi_mux_inp_6_phi_fu_148_p10 <= ap_phi_mux_inp_1_phi_fu_137_p6;
        elsif (((icmp_ln123_fu_229_p2 = ap_const_lv1_0) and (icmp_ln169_fu_451_p2 = ap_const_lv1_1) and (icmp_ln166_fu_426_p2 = ap_const_lv1_1) and (icmp_ln163_fu_406_p2 = ap_const_lv1_1) and (icmp_ln153_fu_347_p2 = ap_const_lv1_1))) then 
            ap_phi_mux_inp_6_phi_fu_148_p10 <= inp_10_fu_487_p3;
        else 
            ap_phi_mux_inp_6_phi_fu_148_p10 <= ap_phi_reg_pp0_iter1_inp_6_reg_145;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_168_p4_assign_proc : process(icmp_ln123_reg_623, icmp_ln126_reg_627, or_ln129_reg_631, trunc_ln137_fu_529_p1, ap_phi_reg_pp0_iter2_storemerge_reg_164)
    begin
        if (((or_ln129_reg_631 = ap_const_lv1_0) and (icmp_ln126_reg_627 = ap_const_lv1_1) and (icmp_ln123_reg_623 = ap_const_lv1_0))) then 
            ap_phi_mux_storemerge_phi_fu_168_p4 <= trunc_ln137_fu_529_p1;
        else 
            ap_phi_mux_storemerge_phi_fu_168_p4 <= ap_phi_reg_pp0_iter2_storemerge_reg_164;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_reg_164 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter1_inp_1_reg_134 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_inp_6_reg_145 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op107_read_state3_assign_proc : process(icmp_ln123_reg_623, icmp_ln126_reg_627, or_ln129_reg_631)
    begin
                ap_predicate_op107_read_state3 <= ((or_ln129_reg_631 = ap_const_lv1_0) and (icmp_ln126_reg_627 = ap_const_lv1_1) and (icmp_ln123_reg_623 = ap_const_lv1_0));
    end process;


    ap_predicate_op113_store_state3_assign_proc : process(icmp_ln123_reg_623, icmp_ln126_reg_627)
    begin
                ap_predicate_op113_store_state3 <= ((icmp_ln126_reg_627 = ap_const_lv1_1) and (icmp_ln123_reg_623 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    connect_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, connect_0_empty_n, ap_predicate_op107_read_state3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op107_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            connect_0_blk_n <= connect_0_empty_n;
        else 
            connect_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    connect_0_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op107_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op107_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            connect_0_read <= ap_const_logic_1;
        else 
            connect_0_read <= ap_const_logic_0;
        end if; 
    end process;


    connect_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, connect_1_full_n, icmp_ln153_reg_639_pp0_iter3_reg, ap_block_pp0_stage0)
    begin
        if (((icmp_ln153_reg_639_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            connect_1_blk_n <= connect_1_full_n;
        else 
            connect_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        connect_1_din <= std_logic_vector(IEEE.numeric_std.resize(signed(inputBuf_q1),32));


    connect_1_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln153_reg_639_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln153_reg_639_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            connect_1_write <= ap_const_logic_1;
        else 
            connect_1_write <= ap_const_logic_0;
        end if; 
    end process;

    i_14_fu_234_p2 <= std_logic_vector(unsigned(i_fu_56) + unsigned(ap_const_lv32_1));
    icmp_ln123_fu_229_p2 <= "1" when (i_fu_56 = mul36) else "0";
    icmp_ln126_fu_268_p2 <= "1" when (unsigned(inp_fu_76) < unsigned(ap_const_lv32_310)) else "0";
    icmp_ln129_2_fu_280_p2 <= "1" when (unsigned(inp_j_fu_84) > unsigned(ap_const_lv32_1B)) else "0";
    icmp_ln129_fu_274_p2 <= "1" when (unsigned(inp_i_fu_72) > unsigned(ap_const_lv32_1B)) else "0";
    icmp_ln145_fu_306_p2 <= "1" when (inp_j_5_fu_300_p2 = ap_const_lv32_1C) else "0";
    icmp_ln148_fu_323_p2 <= "1" when (inp_i_7_fu_317_p2 = ap_const_lv32_1C) else "0";
    icmp_ln153_fu_347_p2 <= "1" when (unsigned(ap_phi_mux_inp_1_phi_fu_137_p6) > unsigned(ap_const_lv32_A8)) else "0";
    icmp_ln163_fu_406_p2 <= "1" when (kx_2_fu_400_p2 = ap_const_lv32_5) else "0";
    icmp_ln166_fu_426_p2 <= "1" when (ky_2_fu_420_p2 = ap_const_lv32_5) else "0";
    icmp_ln169_fu_451_p2 <= "1" when (ox_2_fu_445_p2 = ap_const_lv32_18) else "0";
    icmp_ln172_fu_481_p2 <= "1" when (oy_3_fu_475_p2 = ap_const_lv32_18) else "0";
    inp_10_fu_487_p3 <= 
        ap_const_lv32_0 when (icmp_ln172_fu_481_p2(0) = '1') else 
        ap_phi_mux_inp_1_phi_fu_137_p6;
    inp_9_fu_292_p2 <= std_logic_vector(unsigned(inp_fu_76) + unsigned(ap_const_lv32_1));
    inp_i_7_fu_317_p2 <= std_logic_vector(unsigned(inp_i_fu_72) + unsigned(ap_const_lv32_1));
    inp_i_8_fu_329_p3 <= 
        ap_const_lv32_0 when (icmp_ln148_fu_323_p2(0) = '1') else 
        inp_i_7_fu_317_p2;
    inp_j_5_fu_300_p2 <= std_logic_vector(unsigned(inp_j_fu_84) + unsigned(ap_const_lv32_1));
    inputBuf_address0 <= zext_ln141_fu_534_p1(14 - 1 downto 0);
    inputBuf_address1 <= zext_ln159_fu_538_p1(14 - 1 downto 0);

    inputBuf_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            inputBuf_ce0 <= ap_const_logic_1;
        else 
            inputBuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inputBuf_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            inputBuf_ce1 <= ap_const_logic_1;
        else 
            inputBuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    inputBuf_we0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln123_reg_623, icmp_ln126_reg_627, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_627 = ap_const_lv1_1) and (icmp_ln123_reg_623 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            inputBuf_we0 <= ap_const_logic_1;
        else 
            inputBuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_ind_fu_394_p2 <= std_logic_vector(unsigned(add_ln156_1_fu_388_p2) + unsigned(trunc_ln123_4_fu_256_p1));
    kx_2_fu_400_p2 <= std_logic_vector(unsigned(kx_fu_80) + unsigned(ap_const_lv32_1));
    ky_2_fu_420_p2 <= std_logic_vector(unsigned(ky_fu_68) + unsigned(ap_const_lv32_1));
    or_ln129_fu_286_p2 <= (icmp_ln129_fu_274_p2 or icmp_ln129_2_fu_280_p2);
    ox_2_fu_445_p2 <= std_logic_vector(unsigned(ox_fu_64) + unsigned(ap_const_lv32_1));
    oy_3_fu_475_p2 <= std_logic_vector(unsigned(oy_fu_60) + unsigned(ap_const_lv32_1));
    oy_4_fu_496_p3 <= 
        ap_const_lv32_0 when (icmp_ln172_fu_481_p2(0) = '1') else 
        oy_3_fu_475_p2;
    shl_ln156_1_fu_374_p3 <= (add_ln156_fu_356_p2 & ap_const_lv2_0);
    shl_ln_fu_366_p3 <= (trunc_ln156_fu_362_p1 & ap_const_lv5_0);
    sub_ln156_fu_382_p2 <= std_logic_vector(unsigned(shl_ln_fu_366_p3) - unsigned(shl_ln156_1_fu_374_p3));
    trunc_ln123_4_fu_256_p1 <= ox_fu_64(14 - 1 downto 0);
    trunc_ln123_5_fu_260_p1 <= ky_fu_68(12 - 1 downto 0);
    trunc_ln123_6_fu_264_p1 <= oy_fu_60(12 - 1 downto 0);
    trunc_ln123_fu_252_p1 <= kx_fu_80(14 - 1 downto 0);
    trunc_ln137_fu_529_p1 <= connect_0_dout(8 - 1 downto 0);
    trunc_ln156_fu_362_p1 <= add_ln156_fu_356_p2(9 - 1 downto 0);
    zext_ln141_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inp_8_reg_618),64));
    zext_ln159_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_ind_reg_643_pp0_iter2_reg),64));
end behav;
