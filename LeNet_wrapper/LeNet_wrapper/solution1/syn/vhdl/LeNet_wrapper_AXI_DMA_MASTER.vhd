-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LeNet_wrapper_AXI_DMA_MASTER is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    connect_8_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    connect_8_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    connect_8_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    connect_8_empty_n : IN STD_LOGIC;
    connect_8_read : OUT STD_LOGIC;
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC );
end;


architecture behav of LeNet_wrapper_AXI_DMA_MASTER is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal connect_8_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln13_fu_87_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln50_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_174 : STD_LOGIC_VECTOR (0 downto 0);
    signal valIn_35_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal zext_ln18_fu_98_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal valIn_36_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal zext_ln23_fu_103_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal valIn_37_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal zext_ln28_fu_108_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_fu_113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal valIn_39_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal zext_ln38_fu_118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal valIn_40_reg_225 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state7 : BOOLEAN;
    signal zext_ln43_fu_123_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal KER_size_0_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_size_0_reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal OFM_size_0_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal OFM_size_0_reg_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_size_1_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_size_1_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal KER_bound_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_bound_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sub56_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub56_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal OFM_size_1_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal OFM_size_1_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal OFM_bound_fu_159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal OFM_bound_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal sub_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_done : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_idle : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_ready : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_connect_8_read : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TREADY : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TVALID : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_done : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_idle : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_ready : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_connect_8_read : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TREADY : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TVALID : STD_LOGIC;
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln18_fu_98_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln23_fu_103_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_fu_108_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln38_fu_118_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln43_fu_123_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal regslice_both_out_stream_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal out_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_TVALID_int_regslice : STD_LOGIC;
    signal out_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_stream_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LeNet_wrapper_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        connect_8_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        connect_8_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_8_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_8_empty_n : IN STD_LOGIC;
        connect_8_read : OUT STD_LOGIC;
        out_stream_TREADY : IN STD_LOGIC;
        KER_bound : IN STD_LOGIC_VECTOR (31 downto 0);
        sub56 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_stream_TVALID : OUT STD_LOGIC );
    end component;


    component LeNet_wrapper_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        connect_8_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        connect_8_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_8_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_8_empty_n : IN STD_LOGIC;
        connect_8_read : OUT STD_LOGIC;
        out_stream_TREADY : IN STD_LOGIC;
        OFM_bound : IN STD_LOGIC_VECTOR (31 downto 0);
        sub : IN STD_LOGIC_VECTOR (31 downto 0);
        out_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_stream_TVALID : OUT STD_LOGIC );
    end component;


    component LeNet_wrapper_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LeNet_wrapper_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67 : component LeNet_wrapper_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start,
        ap_done => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_done,
        ap_idle => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_idle,
        ap_ready => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_ready,
        connect_8_dout => connect_8_dout,
        connect_8_num_data_valid => ap_const_lv7_0,
        connect_8_fifo_cap => ap_const_lv7_0,
        connect_8_empty_n => connect_8_empty_n,
        connect_8_read => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_connect_8_read,
        out_stream_TREADY => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TREADY,
        KER_bound => KER_bound_reg_256,
        sub56 => sub56_reg_262,
        out_stream_TDATA => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TDATA,
        out_stream_TVALID => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TVALID);

    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77 : component LeNet_wrapper_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start,
        ap_done => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_done,
        ap_idle => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_idle,
        ap_ready => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_ready,
        connect_8_dout => connect_8_dout,
        connect_8_num_data_valid => ap_const_lv7_0,
        connect_8_fifo_cap => ap_const_lv7_0,
        connect_8_empty_n => connect_8_empty_n,
        connect_8_read => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_connect_8_read,
        out_stream_TREADY => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TREADY,
        OFM_bound => OFM_bound_reg_272,
        sub => sub_reg_278,
        out_stream_TDATA => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TDATA,
        out_stream_TVALID => grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TVALID);

    mul_32s_32s_32_1_1_U403 : component LeNet_wrapper_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => valIn_39_reg_214,
        din1 => valIn_36_reg_188,
        dout => KER_size_0_fu_133_p2);

    mul_32s_32s_32_1_1_U404 : component LeNet_wrapper_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => valIn_40_reg_225,
        din1 => valIn_39_reg_214,
        dout => OFM_size_0_fu_137_p2);

    mul_32s_32s_32_1_1_U405 : component LeNet_wrapper_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => valIn_36_reg_188,
        din1 => KER_size_0_reg_241,
        dout => KER_size_1_fu_141_p2);

    mul_32s_32s_32_1_1_U406 : component LeNet_wrapper_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => valIn_37_reg_199,
        din1 => KER_size_1_reg_251,
        dout => KER_bound_fu_145_p2);

    mul_32s_32s_32_1_1_U407 : component LeNet_wrapper_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => valIn_40_reg_225,
        din1 => OFM_size_0_reg_246,
        dout => OFM_size_1_fu_155_p2);

    mul_32s_32s_32_1_1_U408 : component LeNet_wrapper_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => valIn_35_reg_178,
        din1 => OFM_size_1_reg_267,
        dout => OFM_bound_fu_159_p2);

    regslice_both_out_stream_U : component LeNet_wrapper_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => out_stream_TDATA_int_regslice,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => out_stream_TREADY_int_regslice,
        data_out => out_stream_TDATA,
        vld_out => regslice_both_out_stream_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((regslice_both_out_stream_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_ready = ap_const_logic_1)) then 
                    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_ready = ap_const_logic_1)) then 
                    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                KER_bound_reg_256 <= KER_bound_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_stream_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                KER_size_0_reg_241 <= KER_size_0_fu_133_p2;
                OFM_size_0_reg_246 <= OFM_size_0_fu_137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                KER_size_1_reg_251 <= KER_size_1_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                OFM_bound_reg_272 <= OFM_bound_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                OFM_size_1_reg_267 <= OFM_size_1_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln50_reg_174 <= icmp_ln50_fu_92_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                sub56_reg_262 <= sub56_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                sub_reg_278 <= sub_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                valIn_35_reg_178 <= connect_8_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                valIn_36_reg_188 <= connect_8_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                valIn_37_reg_199 <= connect_8_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                valIn_39_reg_214 <= connect_8_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state7))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                valIn_40_reg_225 <= connect_8_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_block_state1, icmp_ln50_reg_174, ap_block_state2, ap_block_state3, ap_block_state4, ap_block_state5, ap_block_state6, ap_block_state7, ap_block_state8, grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_done, grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_done, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state18, regslice_both_out_stream_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state5))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state7))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state8))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((out_stream_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln50_reg_174 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((out_stream_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln50_reg_174 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((regslice_both_out_stream_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_done)
    begin
        if ((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state17_blk_assign_proc : process(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_done)
    begin
        if ((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(regslice_both_out_stream_U_apdone_blk)
    begin
        if ((regslice_both_out_stream_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1, out_stream_TREADY_int_regslice)
    begin
        if (((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2, out_stream_TREADY_int_regslice)
    begin
        if (((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3, out_stream_TREADY_int_regslice)
    begin
        if (((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3))) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4, out_stream_TREADY_int_regslice)
    begin
        if (((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5, out_stream_TREADY_int_regslice)
    begin
        if (((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state5))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(ap_block_state6, out_stream_TREADY_int_regslice)
    begin
        if (((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6))) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(ap_block_state7, out_stream_TREADY_int_regslice)
    begin
        if (((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state7))) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(ap_block_state8, out_stream_TREADY_int_regslice)
    begin
        if (((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state8))) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(out_stream_TREADY_int_regslice)
    begin
        if ((out_stream_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, connect_8_empty_n, out_stream_TREADY_int_regslice)
    begin
                ap_block_state1 <= ((connect_8_empty_n = ap_const_logic_0) or (out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(connect_8_empty_n, out_stream_TREADY_int_regslice)
    begin
                ap_block_state2 <= ((connect_8_empty_n = ap_const_logic_0) or (out_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(connect_8_empty_n, out_stream_TREADY_int_regslice)
    begin
                ap_block_state3 <= ((connect_8_empty_n = ap_const_logic_0) or (out_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(connect_8_empty_n, out_stream_TREADY_int_regslice)
    begin
                ap_block_state4 <= ((connect_8_empty_n = ap_const_logic_0) or (out_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(connect_8_empty_n, out_stream_TREADY_int_regslice)
    begin
                ap_block_state5 <= ((connect_8_empty_n = ap_const_logic_0) or (out_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(connect_8_empty_n, out_stream_TREADY_int_regslice)
    begin
                ap_block_state6 <= ((connect_8_empty_n = ap_const_logic_0) or (out_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(connect_8_empty_n, out_stream_TREADY_int_regslice)
    begin
                ap_block_state7 <= ((connect_8_empty_n = ap_const_logic_0) or (out_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(connect_8_empty_n, out_stream_TREADY_int_regslice)
    begin
                ap_block_state8 <= ((connect_8_empty_n = ap_const_logic_0) or (out_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state18, regslice_both_out_stream_U_apdone_blk)
    begin
        if (((regslice_both_out_stream_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18, regslice_both_out_stream_U_apdone_blk)
    begin
        if (((regslice_both_out_stream_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    connect_8_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, connect_8_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            connect_8_blk_n <= connect_8_empty_n;
        else 
            connect_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    connect_8_read_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_block_state1, ap_block_state2, ap_block_state3, ap_block_state4, ap_block_state5, ap_block_state6, ap_block_state7, ap_block_state8, grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_connect_8_read, grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_connect_8_read, ap_CS_fsm_state13, ap_CS_fsm_state17, out_stream_TREADY_int_regslice)
    begin
        if (((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state8))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state7))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state5))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2))) and (ap_const_logic_1 = ap_CS_fsm_state2)) 
    or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            connect_8_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            connect_8_read <= grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_connect_8_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            connect_8_read <= grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_connect_8_read;
        else 
            connect_8_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start <= grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start_reg;
    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TREADY <= (out_stream_TREADY_int_regslice and ap_CS_fsm_state17);
    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start <= grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start_reg;
    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TREADY <= (out_stream_TREADY_int_regslice and ap_CS_fsm_state13);
    icmp_ln50_fu_92_p2 <= "1" when (connect_8_dout = ap_const_lv32_0) else "0";

    out_stream_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, out_stream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_stream_TDATA_blk_n <= out_stream_TREADY_int_regslice;
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_stream_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln13_fu_87_p1, ap_block_state1, ap_block_state2, zext_ln18_fu_98_p1, ap_block_state3, zext_ln23_fu_103_p1, ap_block_state4, zext_ln28_fu_108_p1, zext_ln33_fu_113_p1, ap_block_state5, ap_block_state6, zext_ln38_fu_118_p1, ap_block_state7, zext_ln43_fu_123_p1, zext_ln48_fu_128_p1, ap_block_state8, grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TDATA, grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TVALID, grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TDATA, grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TVALID, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if (((ap_const_boolean_0 = ap_block_state8) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_stream_TDATA_int_regslice <= zext_ln48_fu_128_p1;
        elsif (((ap_const_boolean_0 = ap_block_state7) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_stream_TDATA_int_regslice <= zext_ln43_fu_123_p1;
        elsif (((ap_const_boolean_0 = ap_block_state6) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_stream_TDATA_int_regslice <= zext_ln38_fu_118_p1;
        elsif (((ap_const_boolean_0 = ap_block_state5) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_stream_TDATA_int_regslice <= zext_ln33_fu_113_p1;
        elsif (((ap_const_boolean_0 = ap_block_state4) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_stream_TDATA_int_regslice <= zext_ln28_fu_108_p1;
        elsif (((ap_const_boolean_0 = ap_block_state3) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_stream_TDATA_int_regslice <= zext_ln23_fu_103_p1;
        elsif (((ap_const_boolean_0 = ap_block_state2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_stream_TDATA_int_regslice <= zext_ln18_fu_98_p1;
        elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_stream_TDATA_int_regslice <= zext_ln13_fu_87_p1;
        elsif (((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            out_stream_TDATA_int_regslice <= grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TDATA;
        elsif (((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_stream_TDATA_int_regslice <= grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TDATA;
        else 
            out_stream_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    out_stream_TVALID <= regslice_both_out_stream_U_vld_out;

    out_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_block_state1, ap_block_state2, ap_block_state3, ap_block_state4, ap_block_state5, ap_block_state6, ap_block_state7, ap_block_state8, grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TVALID, grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TVALID, ap_CS_fsm_state13, ap_CS_fsm_state17, out_stream_TREADY_int_regslice)
    begin
        if (((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state8))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state7))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state5))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2))) and (ap_const_logic_1 = ap_CS_fsm_state2)) 
    or (not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_stream_TVALID_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_stream_TVALID_int_regslice <= grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_stream_TVALID_int_regslice <= grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TVALID;
        else 
            out_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    sub56_fu_149_p2 <= std_logic_vector(unsigned(KER_bound_reg_256) + unsigned(ap_const_lv32_FFFFFFFF));
    sub_fu_163_p2 <= std_logic_vector(unsigned(OFM_bound_reg_272) + unsigned(ap_const_lv32_FFFFFFFF));
    zext_ln13_fu_87_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(connect_8_dout),64));
    zext_ln18_fu_98_p0 <= connect_8_dout;
    zext_ln18_fu_98_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln18_fu_98_p0),64));
    zext_ln23_fu_103_p0 <= connect_8_dout;
    zext_ln23_fu_103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_fu_103_p0),64));
    zext_ln28_fu_108_p0 <= connect_8_dout;
    zext_ln28_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln28_fu_108_p0),64));
    zext_ln33_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(connect_8_dout),64));
    zext_ln38_fu_118_p0 <= connect_8_dout;
    zext_ln38_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln38_fu_118_p0),64));
    zext_ln43_fu_123_p0 <= connect_8_dout;
    zext_ln43_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln43_fu_123_p0),64));
    zext_ln48_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(connect_8_dout),64));
end behav;
