-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LeNet_wrapper_pool_2u_20u_24u_Pipeline_VITIS_LOOP_153_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_11_ce0 : OUT STD_LOGIC;
    buf_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_11_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_11_ce1 : OUT STD_LOGIC;
    buf_11_we1 : OUT STD_LOGIC;
    buf_11_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_10_ce0 : OUT STD_LOGIC;
    buf_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_10_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_10_ce1 : OUT STD_LOGIC;
    buf_10_we1 : OUT STD_LOGIC;
    buf_10_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_9_ce0 : OUT STD_LOGIC;
    buf_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_9_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_9_ce1 : OUT STD_LOGIC;
    buf_9_we1 : OUT STD_LOGIC;
    buf_9_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_8_ce0 : OUT STD_LOGIC;
    buf_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_8_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_8_ce1 : OUT STD_LOGIC;
    buf_8_we1 : OUT STD_LOGIC;
    buf_8_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_7_ce0 : OUT STD_LOGIC;
    buf_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_7_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_7_ce1 : OUT STD_LOGIC;
    buf_7_we1 : OUT STD_LOGIC;
    buf_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_6_ce0 : OUT STD_LOGIC;
    buf_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_6_ce1 : OUT STD_LOGIC;
    buf_6_we1 : OUT STD_LOGIC;
    buf_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_5_ce0 : OUT STD_LOGIC;
    buf_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_5_ce1 : OUT STD_LOGIC;
    buf_5_we1 : OUT STD_LOGIC;
    buf_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_4_ce0 : OUT STD_LOGIC;
    buf_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_4_ce1 : OUT STD_LOGIC;
    buf_4_we1 : OUT STD_LOGIC;
    buf_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_3_ce0 : OUT STD_LOGIC;
    buf_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_3_ce1 : OUT STD_LOGIC;
    buf_3_we1 : OUT STD_LOGIC;
    buf_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_2_ce0 : OUT STD_LOGIC;
    buf_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_2_ce1 : OUT STD_LOGIC;
    buf_2_we1 : OUT STD_LOGIC;
    buf_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_1_ce0 : OUT STD_LOGIC;
    buf_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_1_ce1 : OUT STD_LOGIC;
    buf_1_we1 : OUT STD_LOGIC;
    buf_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_we1 : OUT STD_LOGIC;
    buf_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (3 downto 0);
    acc_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    acc_ce1 : OUT STD_LOGIC;
    acc_we1 : OUT STD_LOGIC;
    acc_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of LeNet_wrapper_pool_2u_20u_24u_Pipeline_VITIS_LOOP_153_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_FFF0BDC1 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111100001011110111000001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln153_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_reg_450 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal buf_addr_reg_459 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_addr_reg_459_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_1_addr_reg_465 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_1_addr_reg_465_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_2_addr_reg_471 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_2_addr_reg_471_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_3_addr_reg_477 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_3_addr_reg_477_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_4_addr_reg_483 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_4_addr_reg_483_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_5_addr_reg_489 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_5_addr_reg_489_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_6_addr_reg_495 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_6_addr_reg_495_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_7_addr_reg_501 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_7_addr_reg_501_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_8_addr_reg_507 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_8_addr_reg_507_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_9_addr_reg_513 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_9_addr_reg_513_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_10_addr_reg_519 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_10_addr_reg_519_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_11_addr_reg_525 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_11_addr_reg_525_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_366_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_load_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln153_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ch_fu_92 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln153_fu_338_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_ch_2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln156_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_366_p25 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln156_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal tmp_2_fu_366_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_366_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_366_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_366_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_366_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_366_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_366_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_366_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_366_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_366_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_366_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_366_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component LeNet_wrapper_sparsemux_25_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LeNet_wrapper_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_25_4_32_1_1_U135 : component LeNet_wrapper_sparsemux_25_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => buf_r_q0,
        din1 => buf_1_q0,
        din2 => buf_2_q0,
        din3 => buf_3_q0,
        din4 => buf_4_q0,
        din5 => buf_5_q0,
        din6 => buf_6_q0,
        din7 => buf_7_q0,
        din8 => buf_8_q0,
        din9 => buf_9_q0,
        din10 => buf_10_q0,
        din11 => buf_11_q0,
        def => tmp_2_fu_366_p25,
        sel => empty,
        dout => tmp_2_fu_366_p27);

    flow_control_loop_pipe_sequential_init_U : component LeNet_wrapper_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ch_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln153_fu_332_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ch_fu_92 <= add_ln153_fu_338_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ch_fu_92 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                acc_load_reg_542 <= acc_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                buf_10_addr_reg_519 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
                buf_10_addr_reg_519_pp0_iter1_reg <= buf_10_addr_reg_519;
                buf_11_addr_reg_525 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
                buf_11_addr_reg_525_pp0_iter1_reg <= buf_11_addr_reg_525;
                buf_1_addr_reg_465 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
                buf_1_addr_reg_465_pp0_iter1_reg <= buf_1_addr_reg_465;
                buf_2_addr_reg_471 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
                buf_2_addr_reg_471_pp0_iter1_reg <= buf_2_addr_reg_471;
                buf_3_addr_reg_477 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
                buf_3_addr_reg_477_pp0_iter1_reg <= buf_3_addr_reg_477;
                buf_4_addr_reg_483 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
                buf_4_addr_reg_483_pp0_iter1_reg <= buf_4_addr_reg_483;
                buf_5_addr_reg_489 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
                buf_5_addr_reg_489_pp0_iter1_reg <= buf_5_addr_reg_489;
                buf_6_addr_reg_495 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
                buf_6_addr_reg_495_pp0_iter1_reg <= buf_6_addr_reg_495;
                buf_7_addr_reg_501 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
                buf_7_addr_reg_501_pp0_iter1_reg <= buf_7_addr_reg_501;
                buf_8_addr_reg_507 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
                buf_8_addr_reg_507_pp0_iter1_reg <= buf_8_addr_reg_507;
                buf_9_addr_reg_513 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
                buf_9_addr_reg_513_pp0_iter1_reg <= buf_9_addr_reg_513;
                buf_addr_reg_459 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
                buf_addr_reg_459_pp0_iter1_reg <= buf_addr_reg_459;
                tmp_2_reg_536 <= tmp_2_fu_366_p27;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_address1 <= zext_ln153_fu_344_p1(5 - 1 downto 0);

    acc_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln153_fu_332_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln153_fu_332_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_ce1 <= ap_const_logic_1;
        else 
            acc_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_d1 <= ap_const_lv32_FFF0BDC1;

    acc_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln153_fu_332_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln153_fu_332_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_we1 <= ap_const_logic_1;
        else 
            acc_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln153_fu_338_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ch_2) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln153_fu_332_p2)
    begin
        if (((icmp_ln153_fu_332_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ch_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ch_fu_92, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_ch_2 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_ch_2 <= ch_fu_92;
        end if; 
    end process;

    buf_10_address0 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
    buf_10_address1 <= buf_10_addr_reg_519_pp0_iter1_reg;

    buf_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_10_ce0 <= ap_const_logic_1;
        else 
            buf_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_10_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_10_ce1 <= ap_const_logic_1;
        else 
            buf_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_10_d1 <= select_ln156_fu_425_p3;

    buf_10_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_450, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_450 = ap_const_lv4_A))) then 
            buf_10_we1 <= ap_const_logic_1;
        else 
            buf_10_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_11_address0 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
    buf_11_address1 <= buf_11_addr_reg_525_pp0_iter1_reg;

    buf_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_11_ce0 <= ap_const_logic_1;
        else 
            buf_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_11_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_11_ce1 <= ap_const_logic_1;
        else 
            buf_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_11_d1 <= select_ln156_fu_425_p3;

    buf_11_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_450, ap_block_pp0_stage0_11001)
    begin
        if ((not((tmp_reg_450 = ap_const_lv4_A)) and not((tmp_reg_450 = ap_const_lv4_9)) and not((tmp_reg_450 = ap_const_lv4_8)) and not((tmp_reg_450 = ap_const_lv4_7)) and not((tmp_reg_450 = ap_const_lv4_6)) and not((tmp_reg_450 = ap_const_lv4_5)) and not((tmp_reg_450 = ap_const_lv4_4)) and not((tmp_reg_450 = ap_const_lv4_3)) and not((tmp_reg_450 = ap_const_lv4_2)) and not((tmp_reg_450 = ap_const_lv4_1)) and not((tmp_reg_450 = ap_const_lv4_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_11_we1 <= ap_const_logic_1;
        else 
            buf_11_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_address0 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
    buf_1_address1 <= buf_1_addr_reg_465_pp0_iter1_reg;

    buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_1_ce0 <= ap_const_logic_1;
        else 
            buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_1_ce1 <= ap_const_logic_1;
        else 
            buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_d1 <= select_ln156_fu_425_p3;

    buf_1_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_450, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_450 = ap_const_lv4_1))) then 
            buf_1_we1 <= ap_const_logic_1;
        else 
            buf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_address0 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
    buf_2_address1 <= buf_2_addr_reg_471_pp0_iter1_reg;

    buf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2_ce0 <= ap_const_logic_1;
        else 
            buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_2_ce1 <= ap_const_logic_1;
        else 
            buf_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_d1 <= select_ln156_fu_425_p3;

    buf_2_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_450, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_450 = ap_const_lv4_2))) then 
            buf_2_we1 <= ap_const_logic_1;
        else 
            buf_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_3_address0 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
    buf_3_address1 <= buf_3_addr_reg_477_pp0_iter1_reg;

    buf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_3_ce0 <= ap_const_logic_1;
        else 
            buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_3_ce1 <= ap_const_logic_1;
        else 
            buf_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_3_d1 <= select_ln156_fu_425_p3;

    buf_3_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_450, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_450 = ap_const_lv4_3))) then 
            buf_3_we1 <= ap_const_logic_1;
        else 
            buf_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_4_address0 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
    buf_4_address1 <= buf_4_addr_reg_483_pp0_iter1_reg;

    buf_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_4_ce0 <= ap_const_logic_1;
        else 
            buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_4_ce1 <= ap_const_logic_1;
        else 
            buf_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_4_d1 <= select_ln156_fu_425_p3;

    buf_4_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_450, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_450 = ap_const_lv4_4))) then 
            buf_4_we1 <= ap_const_logic_1;
        else 
            buf_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_5_address0 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
    buf_5_address1 <= buf_5_addr_reg_489_pp0_iter1_reg;

    buf_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_5_ce0 <= ap_const_logic_1;
        else 
            buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_5_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_5_ce1 <= ap_const_logic_1;
        else 
            buf_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_5_d1 <= select_ln156_fu_425_p3;

    buf_5_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_450, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_450 = ap_const_lv4_5))) then 
            buf_5_we1 <= ap_const_logic_1;
        else 
            buf_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_6_address0 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
    buf_6_address1 <= buf_6_addr_reg_495_pp0_iter1_reg;

    buf_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_6_ce0 <= ap_const_logic_1;
        else 
            buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_6_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_6_ce1 <= ap_const_logic_1;
        else 
            buf_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_6_d1 <= select_ln156_fu_425_p3;

    buf_6_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_450, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_450 = ap_const_lv4_6))) then 
            buf_6_we1 <= ap_const_logic_1;
        else 
            buf_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_7_address0 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
    buf_7_address1 <= buf_7_addr_reg_501_pp0_iter1_reg;

    buf_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_7_ce0 <= ap_const_logic_1;
        else 
            buf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_7_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_7_ce1 <= ap_const_logic_1;
        else 
            buf_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_7_d1 <= select_ln156_fu_425_p3;

    buf_7_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_450, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_450 = ap_const_lv4_7))) then 
            buf_7_we1 <= ap_const_logic_1;
        else 
            buf_7_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_8_address0 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
    buf_8_address1 <= buf_8_addr_reg_507_pp0_iter1_reg;

    buf_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_8_ce0 <= ap_const_logic_1;
        else 
            buf_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_8_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_8_ce1 <= ap_const_logic_1;
        else 
            buf_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_8_d1 <= select_ln156_fu_425_p3;

    buf_8_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_450, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_450 = ap_const_lv4_8))) then 
            buf_8_we1 <= ap_const_logic_1;
        else 
            buf_8_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_9_address0 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
    buf_9_address1 <= buf_9_addr_reg_513_pp0_iter1_reg;

    buf_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_9_ce0 <= ap_const_logic_1;
        else 
            buf_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_9_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_9_ce1 <= ap_const_logic_1;
        else 
            buf_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_9_d1 <= select_ln156_fu_425_p3;

    buf_9_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_450, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_450 = ap_const_lv4_9))) then 
            buf_9_we1 <= ap_const_logic_1;
        else 
            buf_9_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_address0 <= zext_ln153_fu_344_p1(5 - 1 downto 0);
    buf_r_address1 <= buf_addr_reg_459_pp0_iter1_reg;

    buf_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_r_ce1 <= ap_const_logic_1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_d1 <= select_ln156_fu_425_p3;

    buf_r_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_450, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_450 = ap_const_lv4_0))) then 
            buf_r_we1 <= ap_const_logic_1;
        else 
            buf_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln153_fu_332_p2 <= "1" when (ap_sig_allocacmp_ch_2 = ap_const_lv5_14) else "0";
    icmp_ln156_fu_421_p2 <= "1" when (signed(tmp_2_reg_536) > signed(acc_load_reg_542)) else "0";
    select_ln156_fu_425_p3 <= 
        tmp_2_reg_536 when (icmp_ln156_fu_421_p2(0) = '1') else 
        acc_load_reg_542;
    tmp_2_fu_366_p25 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_reg_450 <= empty;
    zext_ln153_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_ch_2),64));
end behav;
