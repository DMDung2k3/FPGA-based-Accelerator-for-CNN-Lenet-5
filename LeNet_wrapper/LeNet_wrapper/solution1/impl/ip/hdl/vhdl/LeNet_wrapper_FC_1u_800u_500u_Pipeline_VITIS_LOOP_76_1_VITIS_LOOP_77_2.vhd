-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LeNet_wrapper_FC_1u_800u_500u_Pipeline_VITIS_LOOP_76_1_VITIS_LOOP_77_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    connect_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    connect_6_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    connect_6_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    connect_6_empty_n : IN STD_LOGIC;
    connect_6_read : OUT STD_LOGIC;
    connect_7_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    connect_7_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    connect_7_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    connect_7_full_n : IN STD_LOGIC;
    connect_7_write : OUT STD_LOGIC;
    valIn_a_41 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln73_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_we1 : OUT STD_LOGIC;
    B_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of LeNet_wrapper_FC_1u_800u_500u_Pipeline_VITIS_LOOP_76_1_VITIS_LOOP_77_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv19_61A80 : STD_LOGIC_VECTOR (18 downto 0) := "1100001101010000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_320 : STD_LOGIC_VECTOR (9 downto 0) := "1100100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv19_320 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001100100000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal or_ln79_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_reg_317_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln76_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal connect_6_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal connect_7_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln76_fu_174_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln76_reg_307 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln76_reg_307_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln79_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_reg_317_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln81_2_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_70 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln77_fu_230_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_14_fu_74 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln76_1_fu_182_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_fu_78 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    signal add_ln76_1_fu_150_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln81_fu_258_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln77_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_fu_162_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln76_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ult_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln77_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln79_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln79_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_263_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_263_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_263_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_263_p20 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component LeNet_wrapper_mac_muladd_9ns_10ns_10ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component LeNet_wrapper_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_9ns_10ns_10ns_19_4_1_U354 : component LeNet_wrapper_mac_muladd_9ns_10ns_10ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_263_p0,
        din1 => grp_fu_263_p1,
        din2 => grp_fu_263_p2,
        ce => grp_fu_263_ce,
        dout => grp_fu_263_p3);

    flow_control_loop_pipe_sequential_init_U : component LeNet_wrapper_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_14_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_14_fu_74 <= ap_const_lv9_0;
                elsif (((icmp_ln76_fu_144_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_14_fu_74 <= select_ln76_1_fu_182_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_78 <= ap_const_lv19_0;
                elsif (((icmp_ln76_fu_144_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_78 <= add_ln76_1_fu_150_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_70 <= ap_const_lv10_0;
                elsif (((icmp_ln76_fu_144_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_70 <= add_ln77_fu_230_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                or_ln79_reg_317 <= or_ln79_fu_224_p2;
                select_ln76_reg_307 <= select_ln76_fu_174_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                or_ln79_reg_317_pp0_iter2_reg <= or_ln79_reg_317;
                or_ln79_reg_317_pp0_iter3_reg <= or_ln79_reg_317_pp0_iter2_reg;
                select_ln76_reg_307_pp0_iter2_reg <= select_ln76_reg_307;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_address1 <= zext_ln81_2_fu_254_p1(19 - 1 downto 0);

    B_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, or_ln79_reg_317_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln79_reg_317_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln79_reg_317_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_d1_assign_proc : process(ap_enable_reg_pp0_iter4, or_ln79_reg_317_pp0_iter3_reg, ap_block_pp0_stage0, trunc_ln81_fu_258_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
            if ((or_ln79_reg_317_pp0_iter3_reg = ap_const_lv1_1)) then 
                B_d1 <= ap_const_lv8_0;
            elsif ((or_ln79_reg_317_pp0_iter3_reg = ap_const_lv1_0)) then 
                B_d1 <= trunc_ln81_fu_258_p1;
            else 
                B_d1 <= "XXXXXXXX";
            end if;
        else 
            B_d1 <= "XXXXXXXX";
        end if; 
    end process;


    B_we1_assign_proc : process(ap_enable_reg_pp0_iter4, or_ln79_reg_317_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln79_reg_317_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln79_reg_317_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            B_we1 <= ap_const_logic_1;
        else 
            B_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln76_1_fu_150_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_78) + unsigned(ap_const_lv19_1));
    add_ln76_fu_162_p2 <= std_logic_vector(unsigned(i_14_fu_74) + unsigned(ap_const_lv9_1));
    add_ln77_fu_230_p2 <= std_logic_vector(unsigned(select_ln76_fu_174_p3) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4));
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(connect_6_empty_n, or_ln79_reg_317_pp0_iter3_reg, connect_7_full_n)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (((connect_7_full_n = ap_const_logic_0) and (or_ln79_reg_317_pp0_iter3_reg = ap_const_lv1_0)) or ((or_ln79_reg_317_pp0_iter3_reg = ap_const_lv1_0) and (connect_6_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln76_fu_144_p2)
    begin
        if (((icmp_ln76_fu_144_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    connect_6_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, connect_6_empty_n, or_ln79_reg_317_pp0_iter3_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln79_reg_317_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            connect_6_blk_n <= connect_6_empty_n;
        else 
            connect_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    connect_6_read_assign_proc : process(ap_enable_reg_pp0_iter4, or_ln79_reg_317_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln79_reg_317_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            connect_6_read <= ap_const_logic_1;
        else 
            connect_6_read <= ap_const_logic_0;
        end if; 
    end process;


    connect_7_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, or_ln79_reg_317_pp0_iter3_reg, connect_7_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln79_reg_317_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            connect_7_blk_n <= connect_7_full_n;
        else 
            connect_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    connect_7_din <= connect_6_dout;

    connect_7_write_assign_proc : process(ap_enable_reg_pp0_iter4, or_ln79_reg_317_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln79_reg_317_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            connect_7_write <= ap_const_logic_1;
        else 
            connect_7_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_263_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_263_ce <= ap_const_logic_1;
        else 
            grp_fu_263_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_263_p0 <= grp_fu_263_p00(9 - 1 downto 0);
    grp_fu_263_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_1_fu_182_p3),19));
    grp_fu_263_p1 <= ap_const_lv19_320(10 - 1 downto 0);
    grp_fu_263_p2 <= grp_fu_263_p20(10 - 1 downto 0);
    grp_fu_263_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_reg_307_pp0_iter2_reg),19));
    icmp_ln76_fu_144_p2 <= "1" when (indvar_flatten_fu_78 = ap_const_lv19_61A80) else "0";
    icmp_ln77_fu_168_p2 <= "1" when (j_fu_70 = ap_const_lv10_320) else "0";
    icmp_ln79_fu_213_p2 <= "1" when (unsigned(zext_ln77_fu_209_p1) < unsigned(mul_ln73_1)) else "0";
    or_ln79_fu_224_p2 <= (xor_ln79_fu_218_p2 or rev_fu_203_p2);
    rev_fu_203_p2 <= (ult_fu_198_p2 xor ap_const_lv1_1);
    select_ln76_1_fu_182_p3 <= 
        add_ln76_fu_162_p2 when (icmp_ln77_fu_168_p2(0) = '1') else 
        i_14_fu_74;
    select_ln76_fu_174_p3 <= 
        ap_const_lv10_0 when (icmp_ln77_fu_168_p2(0) = '1') else 
        j_fu_70;
    trunc_ln81_fu_258_p1 <= connect_6_dout(8 - 1 downto 0);
    ult_fu_198_p2 <= "1" when (unsigned(zext_ln76_fu_194_p1) < unsigned(valIn_a_41)) else "0";
    xor_ln79_fu_218_p2 <= (icmp_ln79_fu_213_p2 xor ap_const_lv1_1);
    zext_ln76_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_1_fu_182_p3),32));
    zext_ln77_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_fu_174_p3),32));
    zext_ln81_2_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_263_p3),64));
end behav;
