-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LeNet_wrapper is
port (
    in_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC );
end;


architecture behav of LeNet_wrapper is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "LeNet_wrapper_LeNet_wrapper,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=12.592000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=316,HLS_SYN_DSP=0,HLS_SYN_FF=17608,HLS_SYN_LUT=61952,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_start : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_done : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_continue : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_idle : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_ready : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_start_out : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_start_write : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_in_stream_TREADY : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_connect_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_U0_connect_0_write : STD_LOGIC;
    signal SCIG_5u_1u_28u_20u_24u_0u_U0_ap_start : STD_LOGIC;
    signal SCIG_5u_1u_28u_20u_24u_0u_U0_ap_done : STD_LOGIC;
    signal SCIG_5u_1u_28u_20u_24u_0u_U0_ap_continue : STD_LOGIC;
    signal SCIG_5u_1u_28u_20u_24u_0u_U0_ap_idle : STD_LOGIC;
    signal SCIG_5u_1u_28u_20u_24u_0u_U0_ap_ready : STD_LOGIC;
    signal SCIG_5u_1u_28u_20u_24u_0u_U0_start_out : STD_LOGIC;
    signal SCIG_5u_1u_28u_20u_24u_0u_U0_start_write : STD_LOGIC;
    signal SCIG_5u_1u_28u_20u_24u_0u_U0_connect_0_read : STD_LOGIC;
    signal SCIG_5u_1u_28u_20u_24u_0u_U0_connect_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal SCIG_5u_1u_28u_20u_24u_0u_U0_connect_1_write : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_ap_start : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_ap_done : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_ap_continue : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_ap_idle : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_ap_ready : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_start_out : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_start_write : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_connect_1_read : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_connect_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal SMM_1u_25u_20u_U0_connect_2_write : STD_LOGIC;
    signal pool_2u_20u_24u_U0_ap_start : STD_LOGIC;
    signal pool_2u_20u_24u_U0_ap_done : STD_LOGIC;
    signal pool_2u_20u_24u_U0_ap_continue : STD_LOGIC;
    signal pool_2u_20u_24u_U0_ap_idle : STD_LOGIC;
    signal pool_2u_20u_24u_U0_ap_ready : STD_LOGIC;
    signal pool_2u_20u_24u_U0_start_out : STD_LOGIC;
    signal pool_2u_20u_24u_U0_start_write : STD_LOGIC;
    signal pool_2u_20u_24u_U0_connect_2_read : STD_LOGIC;
    signal pool_2u_20u_24u_U0_connect_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_2u_20u_24u_U0_connect_3_write : STD_LOGIC;
    signal SCIG_5u_20u_12u_50u_8u_0u_U0_ap_start : STD_LOGIC;
    signal SCIG_5u_20u_12u_50u_8u_0u_U0_ap_done : STD_LOGIC;
    signal SCIG_5u_20u_12u_50u_8u_0u_U0_ap_continue : STD_LOGIC;
    signal SCIG_5u_20u_12u_50u_8u_0u_U0_ap_idle : STD_LOGIC;
    signal SCIG_5u_20u_12u_50u_8u_0u_U0_ap_ready : STD_LOGIC;
    signal SCIG_5u_20u_12u_50u_8u_0u_U0_start_out : STD_LOGIC;
    signal SCIG_5u_20u_12u_50u_8u_0u_U0_start_write : STD_LOGIC;
    signal SCIG_5u_20u_12u_50u_8u_0u_U0_connect_3_read : STD_LOGIC;
    signal SCIG_5u_20u_12u_50u_8u_0u_U0_connect_4_din : STD_LOGIC_VECTOR (31 downto 0);
    signal SCIG_5u_20u_12u_50u_8u_0u_U0_connect_4_write : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_ap_start : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_ap_done : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_ap_continue : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_ap_idle : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_ap_ready : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_start_out : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_start_write : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_connect_4_read : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_connect_5_din : STD_LOGIC_VECTOR (31 downto 0);
    signal SMM_1u_500u_50u_U0_connect_5_write : STD_LOGIC;
    signal pool_2u_50u_8u_U0_ap_start : STD_LOGIC;
    signal pool_2u_50u_8u_U0_ap_done : STD_LOGIC;
    signal pool_2u_50u_8u_U0_ap_continue : STD_LOGIC;
    signal pool_2u_50u_8u_U0_ap_idle : STD_LOGIC;
    signal pool_2u_50u_8u_U0_ap_ready : STD_LOGIC;
    signal pool_2u_50u_8u_U0_start_out : STD_LOGIC;
    signal pool_2u_50u_8u_U0_start_write : STD_LOGIC;
    signal pool_2u_50u_8u_U0_connect_5_read : STD_LOGIC;
    signal pool_2u_50u_8u_U0_connect_6_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_2u_50u_8u_U0_connect_6_write : STD_LOGIC;
    signal FC_1u_800u_500u_U0_ap_start : STD_LOGIC;
    signal FC_1u_800u_500u_U0_ap_done : STD_LOGIC;
    signal FC_1u_800u_500u_U0_ap_continue : STD_LOGIC;
    signal FC_1u_800u_500u_U0_ap_idle : STD_LOGIC;
    signal FC_1u_800u_500u_U0_ap_ready : STD_LOGIC;
    signal FC_1u_800u_500u_U0_start_out : STD_LOGIC;
    signal FC_1u_800u_500u_U0_start_write : STD_LOGIC;
    signal FC_1u_800u_500u_U0_connect_6_read : STD_LOGIC;
    signal FC_1u_800u_500u_U0_connect_7_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FC_1u_800u_500u_U0_connect_7_write : STD_LOGIC;
    signal FC_1u_500u_10u_U0_ap_start : STD_LOGIC;
    signal FC_1u_500u_10u_U0_ap_done : STD_LOGIC;
    signal FC_1u_500u_10u_U0_ap_continue : STD_LOGIC;
    signal FC_1u_500u_10u_U0_ap_idle : STD_LOGIC;
    signal FC_1u_500u_10u_U0_ap_ready : STD_LOGIC;
    signal FC_1u_500u_10u_U0_start_out : STD_LOGIC;
    signal FC_1u_500u_10u_U0_start_write : STD_LOGIC;
    signal FC_1u_500u_10u_U0_connect_7_read : STD_LOGIC;
    signal FC_1u_500u_10u_U0_connect_8_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FC_1u_500u_10u_U0_connect_8_write : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_start : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_done : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_continue : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_idle : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_ready : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_connect_8_read : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_out_stream_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal AXI_DMA_MASTER_U0_out_stream_TVALID : STD_LOGIC;
    signal connect_0_full_n : STD_LOGIC;
    signal connect_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_0_num_data_valid : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_0_fifo_cap : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_0_empty_n : STD_LOGIC;
    signal connect_1_full_n : STD_LOGIC;
    signal connect_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_1_num_data_valid : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_1_fifo_cap : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_1_empty_n : STD_LOGIC;
    signal connect_2_full_n : STD_LOGIC;
    signal connect_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_2_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal connect_2_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal connect_2_empty_n : STD_LOGIC;
    signal connect_3_full_n : STD_LOGIC;
    signal connect_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_3_num_data_valid : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_3_fifo_cap : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_3_empty_n : STD_LOGIC;
    signal connect_4_full_n : STD_LOGIC;
    signal connect_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_4_num_data_valid : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_4_fifo_cap : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_4_empty_n : STD_LOGIC;
    signal connect_5_full_n : STD_LOGIC;
    signal connect_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_5_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal connect_5_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal connect_5_empty_n : STD_LOGIC;
    signal connect_6_full_n : STD_LOGIC;
    signal connect_6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_6_num_data_valid : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_6_fifo_cap : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_6_empty_n : STD_LOGIC;
    signal connect_7_full_n : STD_LOGIC;
    signal connect_7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_7_num_data_valid : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_7_fifo_cap : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_7_empty_n : STD_LOGIC;
    signal connect_8_full_n : STD_LOGIC;
    signal connect_8_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_8_num_data_valid : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_8_fifo_cap : STD_LOGIC_VECTOR (6 downto 0);
    signal connect_8_empty_n : STD_LOGIC;
    signal start_for_SCIG_5u_1u_28u_20u_24u_0u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SCIG_5u_1u_28u_20u_24u_0u_U0_full_n : STD_LOGIC;
    signal start_for_SCIG_5u_1u_28u_20u_24u_0u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SCIG_5u_1u_28u_20u_24u_0u_U0_empty_n : STD_LOGIC;
    signal start_for_SMM_1u_25u_20u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SMM_1u_25u_20u_U0_full_n : STD_LOGIC;
    signal start_for_SMM_1u_25u_20u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SMM_1u_25u_20u_U0_empty_n : STD_LOGIC;
    signal start_for_pool_2u_20u_24u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_2u_20u_24u_U0_full_n : STD_LOGIC;
    signal start_for_pool_2u_20u_24u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_2u_20u_24u_U0_empty_n : STD_LOGIC;
    signal start_for_SCIG_5u_20u_12u_50u_8u_0u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SCIG_5u_20u_12u_50u_8u_0u_U0_full_n : STD_LOGIC;
    signal start_for_SCIG_5u_20u_12u_50u_8u_0u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SCIG_5u_20u_12u_50u_8u_0u_U0_empty_n : STD_LOGIC;
    signal start_for_SMM_1u_500u_50u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SMM_1u_500u_50u_U0_full_n : STD_LOGIC;
    signal start_for_SMM_1u_500u_50u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SMM_1u_500u_50u_U0_empty_n : STD_LOGIC;
    signal start_for_pool_2u_50u_8u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_2u_50u_8u_U0_full_n : STD_LOGIC;
    signal start_for_pool_2u_50u_8u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_2u_50u_8u_U0_empty_n : STD_LOGIC;
    signal start_for_FC_1u_800u_500u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FC_1u_800u_500u_U0_full_n : STD_LOGIC;
    signal start_for_FC_1u_800u_500u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FC_1u_800u_500u_U0_empty_n : STD_LOGIC;
    signal start_for_FC_1u_500u_10u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FC_1u_500u_10u_U0_full_n : STD_LOGIC;
    signal start_for_FC_1u_500u_10u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FC_1u_500u_10u_U0_empty_n : STD_LOGIC;
    signal start_for_AXI_DMA_MASTER_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AXI_DMA_MASTER_U0_full_n : STD_LOGIC;
    signal start_for_AXI_DMA_MASTER_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AXI_DMA_MASTER_U0_empty_n : STD_LOGIC;

    component LeNet_wrapper_AXI_DMA_SLAVE IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        in_stream_TVALID : IN STD_LOGIC;
        in_stream_TREADY : OUT STD_LOGIC;
        connect_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        connect_0_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_0_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_0_full_n : IN STD_LOGIC;
        connect_0_write : OUT STD_LOGIC );
    end component;


    component LeNet_wrapper_SCIG_5u_1u_28u_20u_24u_0u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        connect_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        connect_0_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_0_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_0_empty_n : IN STD_LOGIC;
        connect_0_read : OUT STD_LOGIC;
        connect_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        connect_1_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_1_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_1_full_n : IN STD_LOGIC;
        connect_1_write : OUT STD_LOGIC );
    end component;


    component LeNet_wrapper_SMM_1u_25u_20u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        connect_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        connect_1_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_1_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_1_empty_n : IN STD_LOGIC;
        connect_1_read : OUT STD_LOGIC;
        connect_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        connect_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        connect_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        connect_2_full_n : IN STD_LOGIC;
        connect_2_write : OUT STD_LOGIC );
    end component;


    component LeNet_wrapper_pool_2u_20u_24u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        connect_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        connect_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        connect_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        connect_2_empty_n : IN STD_LOGIC;
        connect_2_read : OUT STD_LOGIC;
        connect_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        connect_3_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_3_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_3_full_n : IN STD_LOGIC;
        connect_3_write : OUT STD_LOGIC );
    end component;


    component LeNet_wrapper_SCIG_5u_20u_12u_50u_8u_0u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        connect_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        connect_3_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_3_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_3_empty_n : IN STD_LOGIC;
        connect_3_read : OUT STD_LOGIC;
        connect_4_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        connect_4_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_4_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_4_full_n : IN STD_LOGIC;
        connect_4_write : OUT STD_LOGIC );
    end component;


    component LeNet_wrapper_SMM_1u_500u_50u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        connect_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        connect_4_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_4_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_4_empty_n : IN STD_LOGIC;
        connect_4_read : OUT STD_LOGIC;
        connect_5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        connect_5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        connect_5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        connect_5_full_n : IN STD_LOGIC;
        connect_5_write : OUT STD_LOGIC );
    end component;


    component LeNet_wrapper_pool_2u_50u_8u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        connect_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        connect_5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        connect_5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        connect_5_empty_n : IN STD_LOGIC;
        connect_5_read : OUT STD_LOGIC;
        connect_6_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        connect_6_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_6_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_6_full_n : IN STD_LOGIC;
        connect_6_write : OUT STD_LOGIC );
    end component;


    component LeNet_wrapper_FC_1u_800u_500u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        connect_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        connect_6_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_6_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_6_empty_n : IN STD_LOGIC;
        connect_6_read : OUT STD_LOGIC;
        connect_7_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        connect_7_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_7_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_7_full_n : IN STD_LOGIC;
        connect_7_write : OUT STD_LOGIC );
    end component;


    component LeNet_wrapper_FC_1u_500u_10u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        connect_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        connect_7_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_7_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_7_empty_n : IN STD_LOGIC;
        connect_7_read : OUT STD_LOGIC;
        connect_8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        connect_8_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_8_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_8_full_n : IN STD_LOGIC;
        connect_8_write : OUT STD_LOGIC );
    end component;


    component LeNet_wrapper_AXI_DMA_MASTER IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        connect_8_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        connect_8_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_8_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_8_empty_n : IN STD_LOGIC;
        connect_8_read : OUT STD_LOGIC;
        out_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_stream_TVALID : OUT STD_LOGIC;
        out_stream_TREADY : IN STD_LOGIC );
    end component;


    component LeNet_wrapper_fifo_w32_d50_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (6 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (6 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LeNet_wrapper_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LeNet_wrapper_start_for_SCIG_5u_1u_28u_20u_24u_0u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LeNet_wrapper_start_for_SMM_1u_25u_20u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LeNet_wrapper_start_for_pool_2u_20u_24u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LeNet_wrapper_start_for_SCIG_5u_20u_12u_50u_8u_0u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LeNet_wrapper_start_for_SMM_1u_500u_50u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LeNet_wrapper_start_for_pool_2u_50u_8u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LeNet_wrapper_start_for_FC_1u_800u_500u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LeNet_wrapper_start_for_FC_1u_500u_10u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LeNet_wrapper_start_for_AXI_DMA_MASTER_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    AXI_DMA_SLAVE_U0 : component LeNet_wrapper_AXI_DMA_SLAVE
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXI_DMA_SLAVE_U0_ap_start,
        start_full_n => start_for_SCIG_5u_1u_28u_20u_24u_0u_U0_full_n,
        ap_done => AXI_DMA_SLAVE_U0_ap_done,
        ap_continue => AXI_DMA_SLAVE_U0_ap_continue,
        ap_idle => AXI_DMA_SLAVE_U0_ap_idle,
        ap_ready => AXI_DMA_SLAVE_U0_ap_ready,
        start_out => AXI_DMA_SLAVE_U0_start_out,
        start_write => AXI_DMA_SLAVE_U0_start_write,
        in_stream_TDATA => in_stream_TDATA,
        in_stream_TVALID => in_stream_TVALID,
        in_stream_TREADY => AXI_DMA_SLAVE_U0_in_stream_TREADY,
        connect_0_din => AXI_DMA_SLAVE_U0_connect_0_din,
        connect_0_num_data_valid => connect_0_num_data_valid,
        connect_0_fifo_cap => connect_0_fifo_cap,
        connect_0_full_n => connect_0_full_n,
        connect_0_write => AXI_DMA_SLAVE_U0_connect_0_write);

    SCIG_5u_1u_28u_20u_24u_0u_U0 : component LeNet_wrapper_SCIG_5u_1u_28u_20u_24u_0u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => SCIG_5u_1u_28u_20u_24u_0u_U0_ap_start,
        start_full_n => start_for_SMM_1u_25u_20u_U0_full_n,
        ap_done => SCIG_5u_1u_28u_20u_24u_0u_U0_ap_done,
        ap_continue => SCIG_5u_1u_28u_20u_24u_0u_U0_ap_continue,
        ap_idle => SCIG_5u_1u_28u_20u_24u_0u_U0_ap_idle,
        ap_ready => SCIG_5u_1u_28u_20u_24u_0u_U0_ap_ready,
        start_out => SCIG_5u_1u_28u_20u_24u_0u_U0_start_out,
        start_write => SCIG_5u_1u_28u_20u_24u_0u_U0_start_write,
        connect_0_dout => connect_0_dout,
        connect_0_num_data_valid => connect_0_num_data_valid,
        connect_0_fifo_cap => connect_0_fifo_cap,
        connect_0_empty_n => connect_0_empty_n,
        connect_0_read => SCIG_5u_1u_28u_20u_24u_0u_U0_connect_0_read,
        connect_1_din => SCIG_5u_1u_28u_20u_24u_0u_U0_connect_1_din,
        connect_1_num_data_valid => connect_1_num_data_valid,
        connect_1_fifo_cap => connect_1_fifo_cap,
        connect_1_full_n => connect_1_full_n,
        connect_1_write => SCIG_5u_1u_28u_20u_24u_0u_U0_connect_1_write);

    SMM_1u_25u_20u_U0 : component LeNet_wrapper_SMM_1u_25u_20u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => SMM_1u_25u_20u_U0_ap_start,
        start_full_n => start_for_pool_2u_20u_24u_U0_full_n,
        ap_done => SMM_1u_25u_20u_U0_ap_done,
        ap_continue => SMM_1u_25u_20u_U0_ap_continue,
        ap_idle => SMM_1u_25u_20u_U0_ap_idle,
        ap_ready => SMM_1u_25u_20u_U0_ap_ready,
        start_out => SMM_1u_25u_20u_U0_start_out,
        start_write => SMM_1u_25u_20u_U0_start_write,
        connect_1_dout => connect_1_dout,
        connect_1_num_data_valid => connect_1_num_data_valid,
        connect_1_fifo_cap => connect_1_fifo_cap,
        connect_1_empty_n => connect_1_empty_n,
        connect_1_read => SMM_1u_25u_20u_U0_connect_1_read,
        connect_2_din => SMM_1u_25u_20u_U0_connect_2_din,
        connect_2_num_data_valid => connect_2_num_data_valid,
        connect_2_fifo_cap => connect_2_fifo_cap,
        connect_2_full_n => connect_2_full_n,
        connect_2_write => SMM_1u_25u_20u_U0_connect_2_write);

    pool_2u_20u_24u_U0 : component LeNet_wrapper_pool_2u_20u_24u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => pool_2u_20u_24u_U0_ap_start,
        start_full_n => start_for_SCIG_5u_20u_12u_50u_8u_0u_U0_full_n,
        ap_done => pool_2u_20u_24u_U0_ap_done,
        ap_continue => pool_2u_20u_24u_U0_ap_continue,
        ap_idle => pool_2u_20u_24u_U0_ap_idle,
        ap_ready => pool_2u_20u_24u_U0_ap_ready,
        start_out => pool_2u_20u_24u_U0_start_out,
        start_write => pool_2u_20u_24u_U0_start_write,
        connect_2_dout => connect_2_dout,
        connect_2_num_data_valid => connect_2_num_data_valid,
        connect_2_fifo_cap => connect_2_fifo_cap,
        connect_2_empty_n => connect_2_empty_n,
        connect_2_read => pool_2u_20u_24u_U0_connect_2_read,
        connect_3_din => pool_2u_20u_24u_U0_connect_3_din,
        connect_3_num_data_valid => connect_3_num_data_valid,
        connect_3_fifo_cap => connect_3_fifo_cap,
        connect_3_full_n => connect_3_full_n,
        connect_3_write => pool_2u_20u_24u_U0_connect_3_write);

    SCIG_5u_20u_12u_50u_8u_0u_U0 : component LeNet_wrapper_SCIG_5u_20u_12u_50u_8u_0u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => SCIG_5u_20u_12u_50u_8u_0u_U0_ap_start,
        start_full_n => start_for_SMM_1u_500u_50u_U0_full_n,
        ap_done => SCIG_5u_20u_12u_50u_8u_0u_U0_ap_done,
        ap_continue => SCIG_5u_20u_12u_50u_8u_0u_U0_ap_continue,
        ap_idle => SCIG_5u_20u_12u_50u_8u_0u_U0_ap_idle,
        ap_ready => SCIG_5u_20u_12u_50u_8u_0u_U0_ap_ready,
        start_out => SCIG_5u_20u_12u_50u_8u_0u_U0_start_out,
        start_write => SCIG_5u_20u_12u_50u_8u_0u_U0_start_write,
        connect_3_dout => connect_3_dout,
        connect_3_num_data_valid => connect_3_num_data_valid,
        connect_3_fifo_cap => connect_3_fifo_cap,
        connect_3_empty_n => connect_3_empty_n,
        connect_3_read => SCIG_5u_20u_12u_50u_8u_0u_U0_connect_3_read,
        connect_4_din => SCIG_5u_20u_12u_50u_8u_0u_U0_connect_4_din,
        connect_4_num_data_valid => connect_4_num_data_valid,
        connect_4_fifo_cap => connect_4_fifo_cap,
        connect_4_full_n => connect_4_full_n,
        connect_4_write => SCIG_5u_20u_12u_50u_8u_0u_U0_connect_4_write);

    SMM_1u_500u_50u_U0 : component LeNet_wrapper_SMM_1u_500u_50u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => SMM_1u_500u_50u_U0_ap_start,
        start_full_n => start_for_pool_2u_50u_8u_U0_full_n,
        ap_done => SMM_1u_500u_50u_U0_ap_done,
        ap_continue => SMM_1u_500u_50u_U0_ap_continue,
        ap_idle => SMM_1u_500u_50u_U0_ap_idle,
        ap_ready => SMM_1u_500u_50u_U0_ap_ready,
        start_out => SMM_1u_500u_50u_U0_start_out,
        start_write => SMM_1u_500u_50u_U0_start_write,
        connect_4_dout => connect_4_dout,
        connect_4_num_data_valid => connect_4_num_data_valid,
        connect_4_fifo_cap => connect_4_fifo_cap,
        connect_4_empty_n => connect_4_empty_n,
        connect_4_read => SMM_1u_500u_50u_U0_connect_4_read,
        connect_5_din => SMM_1u_500u_50u_U0_connect_5_din,
        connect_5_num_data_valid => connect_5_num_data_valid,
        connect_5_fifo_cap => connect_5_fifo_cap,
        connect_5_full_n => connect_5_full_n,
        connect_5_write => SMM_1u_500u_50u_U0_connect_5_write);

    pool_2u_50u_8u_U0 : component LeNet_wrapper_pool_2u_50u_8u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => pool_2u_50u_8u_U0_ap_start,
        start_full_n => start_for_FC_1u_800u_500u_U0_full_n,
        ap_done => pool_2u_50u_8u_U0_ap_done,
        ap_continue => pool_2u_50u_8u_U0_ap_continue,
        ap_idle => pool_2u_50u_8u_U0_ap_idle,
        ap_ready => pool_2u_50u_8u_U0_ap_ready,
        start_out => pool_2u_50u_8u_U0_start_out,
        start_write => pool_2u_50u_8u_U0_start_write,
        connect_5_dout => connect_5_dout,
        connect_5_num_data_valid => connect_5_num_data_valid,
        connect_5_fifo_cap => connect_5_fifo_cap,
        connect_5_empty_n => connect_5_empty_n,
        connect_5_read => pool_2u_50u_8u_U0_connect_5_read,
        connect_6_din => pool_2u_50u_8u_U0_connect_6_din,
        connect_6_num_data_valid => connect_6_num_data_valid,
        connect_6_fifo_cap => connect_6_fifo_cap,
        connect_6_full_n => connect_6_full_n,
        connect_6_write => pool_2u_50u_8u_U0_connect_6_write);

    FC_1u_800u_500u_U0 : component LeNet_wrapper_FC_1u_800u_500u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => FC_1u_800u_500u_U0_ap_start,
        start_full_n => start_for_FC_1u_500u_10u_U0_full_n,
        ap_done => FC_1u_800u_500u_U0_ap_done,
        ap_continue => FC_1u_800u_500u_U0_ap_continue,
        ap_idle => FC_1u_800u_500u_U0_ap_idle,
        ap_ready => FC_1u_800u_500u_U0_ap_ready,
        start_out => FC_1u_800u_500u_U0_start_out,
        start_write => FC_1u_800u_500u_U0_start_write,
        connect_6_dout => connect_6_dout,
        connect_6_num_data_valid => connect_6_num_data_valid,
        connect_6_fifo_cap => connect_6_fifo_cap,
        connect_6_empty_n => connect_6_empty_n,
        connect_6_read => FC_1u_800u_500u_U0_connect_6_read,
        connect_7_din => FC_1u_800u_500u_U0_connect_7_din,
        connect_7_num_data_valid => connect_7_num_data_valid,
        connect_7_fifo_cap => connect_7_fifo_cap,
        connect_7_full_n => connect_7_full_n,
        connect_7_write => FC_1u_800u_500u_U0_connect_7_write);

    FC_1u_500u_10u_U0 : component LeNet_wrapper_FC_1u_500u_10u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => FC_1u_500u_10u_U0_ap_start,
        start_full_n => start_for_AXI_DMA_MASTER_U0_full_n,
        ap_done => FC_1u_500u_10u_U0_ap_done,
        ap_continue => FC_1u_500u_10u_U0_ap_continue,
        ap_idle => FC_1u_500u_10u_U0_ap_idle,
        ap_ready => FC_1u_500u_10u_U0_ap_ready,
        start_out => FC_1u_500u_10u_U0_start_out,
        start_write => FC_1u_500u_10u_U0_start_write,
        connect_7_dout => connect_7_dout,
        connect_7_num_data_valid => connect_7_num_data_valid,
        connect_7_fifo_cap => connect_7_fifo_cap,
        connect_7_empty_n => connect_7_empty_n,
        connect_7_read => FC_1u_500u_10u_U0_connect_7_read,
        connect_8_din => FC_1u_500u_10u_U0_connect_8_din,
        connect_8_num_data_valid => connect_8_num_data_valid,
        connect_8_fifo_cap => connect_8_fifo_cap,
        connect_8_full_n => connect_8_full_n,
        connect_8_write => FC_1u_500u_10u_U0_connect_8_write);

    AXI_DMA_MASTER_U0 : component LeNet_wrapper_AXI_DMA_MASTER
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXI_DMA_MASTER_U0_ap_start,
        ap_done => AXI_DMA_MASTER_U0_ap_done,
        ap_continue => AXI_DMA_MASTER_U0_ap_continue,
        ap_idle => AXI_DMA_MASTER_U0_ap_idle,
        ap_ready => AXI_DMA_MASTER_U0_ap_ready,
        connect_8_dout => connect_8_dout,
        connect_8_num_data_valid => connect_8_num_data_valid,
        connect_8_fifo_cap => connect_8_fifo_cap,
        connect_8_empty_n => connect_8_empty_n,
        connect_8_read => AXI_DMA_MASTER_U0_connect_8_read,
        out_stream_TDATA => AXI_DMA_MASTER_U0_out_stream_TDATA,
        out_stream_TVALID => AXI_DMA_MASTER_U0_out_stream_TVALID,
        out_stream_TREADY => out_stream_TREADY);

    connect_0_U : component LeNet_wrapper_fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXI_DMA_SLAVE_U0_connect_0_din,
        if_full_n => connect_0_full_n,
        if_write => AXI_DMA_SLAVE_U0_connect_0_write,
        if_dout => connect_0_dout,
        if_num_data_valid => connect_0_num_data_valid,
        if_fifo_cap => connect_0_fifo_cap,
        if_empty_n => connect_0_empty_n,
        if_read => SCIG_5u_1u_28u_20u_24u_0u_U0_connect_0_read);

    connect_1_U : component LeNet_wrapper_fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SCIG_5u_1u_28u_20u_24u_0u_U0_connect_1_din,
        if_full_n => connect_1_full_n,
        if_write => SCIG_5u_1u_28u_20u_24u_0u_U0_connect_1_write,
        if_dout => connect_1_dout,
        if_num_data_valid => connect_1_num_data_valid,
        if_fifo_cap => connect_1_fifo_cap,
        if_empty_n => connect_1_empty_n,
        if_read => SMM_1u_25u_20u_U0_connect_1_read);

    connect_2_U : component LeNet_wrapper_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SMM_1u_25u_20u_U0_connect_2_din,
        if_full_n => connect_2_full_n,
        if_write => SMM_1u_25u_20u_U0_connect_2_write,
        if_dout => connect_2_dout,
        if_num_data_valid => connect_2_num_data_valid,
        if_fifo_cap => connect_2_fifo_cap,
        if_empty_n => connect_2_empty_n,
        if_read => pool_2u_20u_24u_U0_connect_2_read);

    connect_3_U : component LeNet_wrapper_fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_2u_20u_24u_U0_connect_3_din,
        if_full_n => connect_3_full_n,
        if_write => pool_2u_20u_24u_U0_connect_3_write,
        if_dout => connect_3_dout,
        if_num_data_valid => connect_3_num_data_valid,
        if_fifo_cap => connect_3_fifo_cap,
        if_empty_n => connect_3_empty_n,
        if_read => SCIG_5u_20u_12u_50u_8u_0u_U0_connect_3_read);

    connect_4_U : component LeNet_wrapper_fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SCIG_5u_20u_12u_50u_8u_0u_U0_connect_4_din,
        if_full_n => connect_4_full_n,
        if_write => SCIG_5u_20u_12u_50u_8u_0u_U0_connect_4_write,
        if_dout => connect_4_dout,
        if_num_data_valid => connect_4_num_data_valid,
        if_fifo_cap => connect_4_fifo_cap,
        if_empty_n => connect_4_empty_n,
        if_read => SMM_1u_500u_50u_U0_connect_4_read);

    connect_5_U : component LeNet_wrapper_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SMM_1u_500u_50u_U0_connect_5_din,
        if_full_n => connect_5_full_n,
        if_write => SMM_1u_500u_50u_U0_connect_5_write,
        if_dout => connect_5_dout,
        if_num_data_valid => connect_5_num_data_valid,
        if_fifo_cap => connect_5_fifo_cap,
        if_empty_n => connect_5_empty_n,
        if_read => pool_2u_50u_8u_U0_connect_5_read);

    connect_6_U : component LeNet_wrapper_fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_2u_50u_8u_U0_connect_6_din,
        if_full_n => connect_6_full_n,
        if_write => pool_2u_50u_8u_U0_connect_6_write,
        if_dout => connect_6_dout,
        if_num_data_valid => connect_6_num_data_valid,
        if_fifo_cap => connect_6_fifo_cap,
        if_empty_n => connect_6_empty_n,
        if_read => FC_1u_800u_500u_U0_connect_6_read);

    connect_7_U : component LeNet_wrapper_fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FC_1u_800u_500u_U0_connect_7_din,
        if_full_n => connect_7_full_n,
        if_write => FC_1u_800u_500u_U0_connect_7_write,
        if_dout => connect_7_dout,
        if_num_data_valid => connect_7_num_data_valid,
        if_fifo_cap => connect_7_fifo_cap,
        if_empty_n => connect_7_empty_n,
        if_read => FC_1u_500u_10u_U0_connect_7_read);

    connect_8_U : component LeNet_wrapper_fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FC_1u_500u_10u_U0_connect_8_din,
        if_full_n => connect_8_full_n,
        if_write => FC_1u_500u_10u_U0_connect_8_write,
        if_dout => connect_8_dout,
        if_num_data_valid => connect_8_num_data_valid,
        if_fifo_cap => connect_8_fifo_cap,
        if_empty_n => connect_8_empty_n,
        if_read => AXI_DMA_MASTER_U0_connect_8_read);

    start_for_SCIG_5u_1u_28u_20u_24u_0u_U0_U : component LeNet_wrapper_start_for_SCIG_5u_1u_28u_20u_24u_0u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_SCIG_5u_1u_28u_20u_24u_0u_U0_din,
        if_full_n => start_for_SCIG_5u_1u_28u_20u_24u_0u_U0_full_n,
        if_write => AXI_DMA_SLAVE_U0_start_write,
        if_dout => start_for_SCIG_5u_1u_28u_20u_24u_0u_U0_dout,
        if_empty_n => start_for_SCIG_5u_1u_28u_20u_24u_0u_U0_empty_n,
        if_read => SCIG_5u_1u_28u_20u_24u_0u_U0_ap_ready);

    start_for_SMM_1u_25u_20u_U0_U : component LeNet_wrapper_start_for_SMM_1u_25u_20u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_SMM_1u_25u_20u_U0_din,
        if_full_n => start_for_SMM_1u_25u_20u_U0_full_n,
        if_write => SCIG_5u_1u_28u_20u_24u_0u_U0_start_write,
        if_dout => start_for_SMM_1u_25u_20u_U0_dout,
        if_empty_n => start_for_SMM_1u_25u_20u_U0_empty_n,
        if_read => SMM_1u_25u_20u_U0_ap_ready);

    start_for_pool_2u_20u_24u_U0_U : component LeNet_wrapper_start_for_pool_2u_20u_24u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pool_2u_20u_24u_U0_din,
        if_full_n => start_for_pool_2u_20u_24u_U0_full_n,
        if_write => SMM_1u_25u_20u_U0_start_write,
        if_dout => start_for_pool_2u_20u_24u_U0_dout,
        if_empty_n => start_for_pool_2u_20u_24u_U0_empty_n,
        if_read => pool_2u_20u_24u_U0_ap_ready);

    start_for_SCIG_5u_20u_12u_50u_8u_0u_U0_U : component LeNet_wrapper_start_for_SCIG_5u_20u_12u_50u_8u_0u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_SCIG_5u_20u_12u_50u_8u_0u_U0_din,
        if_full_n => start_for_SCIG_5u_20u_12u_50u_8u_0u_U0_full_n,
        if_write => pool_2u_20u_24u_U0_start_write,
        if_dout => start_for_SCIG_5u_20u_12u_50u_8u_0u_U0_dout,
        if_empty_n => start_for_SCIG_5u_20u_12u_50u_8u_0u_U0_empty_n,
        if_read => SCIG_5u_20u_12u_50u_8u_0u_U0_ap_ready);

    start_for_SMM_1u_500u_50u_U0_U : component LeNet_wrapper_start_for_SMM_1u_500u_50u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_SMM_1u_500u_50u_U0_din,
        if_full_n => start_for_SMM_1u_500u_50u_U0_full_n,
        if_write => SCIG_5u_20u_12u_50u_8u_0u_U0_start_write,
        if_dout => start_for_SMM_1u_500u_50u_U0_dout,
        if_empty_n => start_for_SMM_1u_500u_50u_U0_empty_n,
        if_read => SMM_1u_500u_50u_U0_ap_ready);

    start_for_pool_2u_50u_8u_U0_U : component LeNet_wrapper_start_for_pool_2u_50u_8u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pool_2u_50u_8u_U0_din,
        if_full_n => start_for_pool_2u_50u_8u_U0_full_n,
        if_write => SMM_1u_500u_50u_U0_start_write,
        if_dout => start_for_pool_2u_50u_8u_U0_dout,
        if_empty_n => start_for_pool_2u_50u_8u_U0_empty_n,
        if_read => pool_2u_50u_8u_U0_ap_ready);

    start_for_FC_1u_800u_500u_U0_U : component LeNet_wrapper_start_for_FC_1u_800u_500u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_FC_1u_800u_500u_U0_din,
        if_full_n => start_for_FC_1u_800u_500u_U0_full_n,
        if_write => pool_2u_50u_8u_U0_start_write,
        if_dout => start_for_FC_1u_800u_500u_U0_dout,
        if_empty_n => start_for_FC_1u_800u_500u_U0_empty_n,
        if_read => FC_1u_800u_500u_U0_ap_ready);

    start_for_FC_1u_500u_10u_U0_U : component LeNet_wrapper_start_for_FC_1u_500u_10u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_FC_1u_500u_10u_U0_din,
        if_full_n => start_for_FC_1u_500u_10u_U0_full_n,
        if_write => FC_1u_800u_500u_U0_start_write,
        if_dout => start_for_FC_1u_500u_10u_U0_dout,
        if_empty_n => start_for_FC_1u_500u_10u_U0_empty_n,
        if_read => FC_1u_500u_10u_U0_ap_ready);

    start_for_AXI_DMA_MASTER_U0_U : component LeNet_wrapper_start_for_AXI_DMA_MASTER_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_AXI_DMA_MASTER_U0_din,
        if_full_n => start_for_AXI_DMA_MASTER_U0_full_n,
        if_write => FC_1u_500u_10u_U0_start_write,
        if_dout => start_for_AXI_DMA_MASTER_U0_dout,
        if_empty_n => start_for_AXI_DMA_MASTER_U0_empty_n,
        if_read => AXI_DMA_MASTER_U0_ap_ready);




    AXI_DMA_MASTER_U0_ap_continue <= ap_const_logic_1;
    AXI_DMA_MASTER_U0_ap_start <= start_for_AXI_DMA_MASTER_U0_empty_n;
    AXI_DMA_SLAVE_U0_ap_continue <= ap_const_logic_1;
    AXI_DMA_SLAVE_U0_ap_start <= ap_const_logic_1;
    FC_1u_500u_10u_U0_ap_continue <= ap_const_logic_1;
    FC_1u_500u_10u_U0_ap_start <= start_for_FC_1u_500u_10u_U0_empty_n;
    FC_1u_800u_500u_U0_ap_continue <= ap_const_logic_1;
    FC_1u_800u_500u_U0_ap_start <= start_for_FC_1u_800u_500u_U0_empty_n;
    SCIG_5u_1u_28u_20u_24u_0u_U0_ap_continue <= ap_const_logic_1;
    SCIG_5u_1u_28u_20u_24u_0u_U0_ap_start <= start_for_SCIG_5u_1u_28u_20u_24u_0u_U0_empty_n;
    SCIG_5u_20u_12u_50u_8u_0u_U0_ap_continue <= ap_const_logic_1;
    SCIG_5u_20u_12u_50u_8u_0u_U0_ap_start <= start_for_SCIG_5u_20u_12u_50u_8u_0u_U0_empty_n;
    SMM_1u_25u_20u_U0_ap_continue <= ap_const_logic_1;
    SMM_1u_25u_20u_U0_ap_start <= start_for_SMM_1u_25u_20u_U0_empty_n;
    SMM_1u_500u_50u_U0_ap_continue <= ap_const_logic_1;
    SMM_1u_500u_50u_U0_ap_start <= start_for_SMM_1u_500u_50u_U0_empty_n;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    in_stream_TREADY <= AXI_DMA_SLAVE_U0_in_stream_TREADY;
    out_stream_TDATA <= AXI_DMA_MASTER_U0_out_stream_TDATA;
    out_stream_TVALID <= AXI_DMA_MASTER_U0_out_stream_TVALID;
    pool_2u_20u_24u_U0_ap_continue <= ap_const_logic_1;
    pool_2u_20u_24u_U0_ap_start <= start_for_pool_2u_20u_24u_U0_empty_n;
    pool_2u_50u_8u_U0_ap_continue <= ap_const_logic_1;
    pool_2u_50u_8u_U0_ap_start <= start_for_pool_2u_50u_8u_U0_empty_n;
    start_for_AXI_DMA_MASTER_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_FC_1u_500u_10u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_FC_1u_800u_500u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_SCIG_5u_1u_28u_20u_24u_0u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_SCIG_5u_20u_12u_50u_8u_0u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_SMM_1u_25u_20u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_SMM_1u_500u_50u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pool_2u_20u_24u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pool_2u_50u_8u_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
