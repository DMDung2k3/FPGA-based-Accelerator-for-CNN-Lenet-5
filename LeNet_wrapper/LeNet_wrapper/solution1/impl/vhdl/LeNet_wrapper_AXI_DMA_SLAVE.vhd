-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LeNet_wrapper_AXI_DMA_SLAVE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    connect_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    connect_0_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    connect_0_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    connect_0_full_n : IN STD_LOGIC;
    connect_0_write : OUT STD_LOGIC );
end;


architecture behav of LeNet_wrapper_AXI_DMA_SLAVE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal connect_0_blk_n : STD_LOGIC;
    signal icmp_ln41_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_155 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal valIn_data_3_fu_96_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valIn_data_3_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal valIn_data_4_fu_101_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valIn_data_4_reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal valIn_data_5_fu_106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valIn_data_5_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal valIn_data_6_fu_111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valIn_data_6_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal valIn_data_7_fu_116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valIn_data_7_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal KER_size_0_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_size_0_reg_187 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal IFM_size_0_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal IFM_size_0_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_size_1_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_size_1_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal KER_bound_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_bound_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal IFM_size_1_fu_147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal IFM_size_1_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal IFM_bound_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal IFM_bound_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start : STD_LOGIC;
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_done : STD_LOGIC;
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_idle : STD_LOGIC;
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_ready : STD_LOGIC;
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_write : STD_LOGIC;
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_in_stream_TREADY : STD_LOGIC;
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start : STD_LOGIC;
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_done : STD_LOGIC;
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_idle : STD_LOGIC;
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_ready : STD_LOGIC;
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_write : STD_LOGIC;
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_in_stream_TREADY : STD_LOGIC;
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_state7 : BOOLEAN;
    signal valIn_data_2_fu_85_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valIn_data_fu_121_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valIn_data_1_fu_126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state12_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal regslice_both_in_stream_U_apdone_blk : STD_LOGIC;
    signal in_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal in_stream_TVALID_int_regslice : STD_LOGIC;
    signal in_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_stream_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LeNet_wrapper_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_TVALID : IN STD_LOGIC;
        connect_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        connect_0_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_0_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_0_full_n : IN STD_LOGIC;
        connect_0_write : OUT STD_LOGIC;
        KER_bound : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        in_stream_TREADY : OUT STD_LOGIC );
    end component;


    component LeNet_wrapper_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_TVALID : IN STD_LOGIC;
        connect_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        connect_0_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_0_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        connect_0_full_n : IN STD_LOGIC;
        connect_0_write : OUT STD_LOGIC;
        IFM_bound : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        in_stream_TREADY : OUT STD_LOGIC );
    end component;


    component LeNet_wrapper_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LeNet_wrapper_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67 : component LeNet_wrapper_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start,
        ap_done => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_done,
        ap_idle => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_idle,
        ap_ready => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_ready,
        in_stream_TVALID => in_stream_TVALID_int_regslice,
        connect_0_din => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_din,
        connect_0_num_data_valid => ap_const_lv7_0,
        connect_0_fifo_cap => ap_const_lv7_0,
        connect_0_full_n => connect_0_full_n,
        connect_0_write => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_write,
        KER_bound => KER_bound_reg_202,
        in_stream_TDATA => in_stream_TDATA_int_regslice,
        in_stream_TREADY => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_in_stream_TREADY);

    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76 : component LeNet_wrapper_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start,
        ap_done => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_done,
        ap_idle => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_idle,
        ap_ready => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_ready,
        in_stream_TVALID => in_stream_TVALID_int_regslice,
        connect_0_din => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_din,
        connect_0_num_data_valid => ap_const_lv7_0,
        connect_0_fifo_cap => ap_const_lv7_0,
        connect_0_full_n => connect_0_full_n,
        connect_0_write => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_write,
        IFM_bound => IFM_bound_reg_212,
        in_stream_TDATA => in_stream_TDATA_int_regslice,
        in_stream_TREADY => grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_in_stream_TREADY);

    mul_32s_32s_32_1_1_U7 : component LeNet_wrapper_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => valIn_data_7_reg_182,
        din1 => valIn_data_4_reg_164,
        dout => KER_size_0_fu_131_p2);

    mul_32s_32s_32_1_1_U8 : component LeNet_wrapper_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => valIn_data_6_reg_176,
        din1 => valIn_data_5_reg_170,
        dout => IFM_size_0_fu_135_p2);

    mul_32s_32s_32_1_1_U9 : component LeNet_wrapper_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => KER_size_0_reg_187,
        din1 => valIn_data_4_reg_164,
        dout => KER_size_1_fu_139_p2);

    mul_32s_32s_32_1_1_U10 : component LeNet_wrapper_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => KER_size_1_reg_197,
        din1 => valIn_data_5_reg_170,
        dout => KER_bound_fu_143_p2);

    mul_32s_32s_32_1_1_U11 : component LeNet_wrapper_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => IFM_size_0_reg_192,
        din1 => valIn_data_6_reg_176,
        dout => IFM_size_1_fu_147_p2);

    mul_32s_32s_32_1_1_U12 : component LeNet_wrapper_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => IFM_size_1_reg_207,
        din1 => valIn_data_3_reg_159,
        dout => IFM_bound_fu_151_p2);

    regslice_both_in_stream_U : component LeNet_wrapper_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_stream_TDATA,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_U_ack_in,
        data_out => in_stream_TDATA_int_regslice,
        vld_out => in_stream_TVALID_int_regslice,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_on_subcall_done))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_ready = ap_const_logic_1)) then 
                    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_ready = ap_const_logic_1)) then 
                    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                IFM_bound_reg_212 <= IFM_bound_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8))) then
                IFM_size_0_reg_192 <= IFM_size_0_fu_135_p2;
                KER_size_0_reg_187 <= KER_size_0_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                IFM_size_1_reg_207 <= IFM_size_1_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                KER_bound_reg_202 <= KER_bound_fu_143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                KER_size_1_reg_197 <= KER_size_1_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                icmp_ln41_reg_155 <= icmp_ln41_fu_90_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2))) then
                valIn_data_3_reg_159 <= valIn_data_3_fu_96_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3))) then
                valIn_data_4_reg_164 <= valIn_data_4_fu_101_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4))) then
                valIn_data_5_reg_170 <= valIn_data_5_fu_106_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5))) then
                valIn_data_6_reg_176 <= valIn_data_6_fu_111_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6))) then
                valIn_data_7_reg_182 <= valIn_data_7_fu_116_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln41_reg_155, ap_block_state1, ap_block_state2, ap_block_state3, ap_block_state4, ap_block_state5, ap_block_state6, ap_block_state8, ap_CS_fsm_state12, ap_block_state7, ap_block_state12_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8) and (icmp_ln41_reg_155 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8) and (icmp_ln41_reg_155 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(ap_block_state12_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state12_on_subcall_done)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2)
    begin
        if ((ap_const_boolean_1 = ap_block_state2)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3)
    begin
        if ((ap_const_boolean_1 = ap_block_state3)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4)
    begin
        if ((ap_const_boolean_1 = ap_block_state4)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5)
    begin
        if ((ap_const_boolean_1 = ap_block_state5)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(ap_block_state6)
    begin
        if ((ap_const_boolean_1 = ap_block_state6)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(ap_block_state7)
    begin
        if ((ap_const_boolean_1 = ap_block_state7)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(ap_block_state8)
    begin
        if ((ap_const_boolean_1 = ap_block_state8)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, connect_0_full_n, in_stream_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((connect_0_full_n = ap_const_logic_0) or (in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state12_on_subcall_done_assign_proc : process(icmp_ln41_reg_155, grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_done, grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_done)
    begin
                ap_block_state12_on_subcall_done <= (((grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_done = ap_const_logic_0) and (icmp_ln41_reg_155 = ap_const_lv1_1)) or ((grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_done = ap_const_logic_0) and (icmp_ln41_reg_155 = ap_const_lv1_0)));
    end process;


    ap_block_state2_assign_proc : process(connect_0_full_n, in_stream_TVALID_int_regslice)
    begin
                ap_block_state2 <= ((connect_0_full_n = ap_const_logic_0) or (in_stream_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(connect_0_full_n, in_stream_TVALID_int_regslice)
    begin
                ap_block_state3 <= ((connect_0_full_n = ap_const_logic_0) or (in_stream_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(connect_0_full_n, in_stream_TVALID_int_regslice)
    begin
                ap_block_state4 <= ((connect_0_full_n = ap_const_logic_0) or (in_stream_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(connect_0_full_n, in_stream_TVALID_int_regslice)
    begin
                ap_block_state5 <= ((connect_0_full_n = ap_const_logic_0) or (in_stream_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(connect_0_full_n, in_stream_TVALID_int_regslice)
    begin
                ap_block_state6 <= ((connect_0_full_n = ap_const_logic_0) or (in_stream_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(connect_0_full_n, in_stream_TVALID_int_regslice)
    begin
                ap_block_state7 <= ((connect_0_full_n = ap_const_logic_0) or (in_stream_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(connect_0_full_n, in_stream_TVALID_int_regslice)
    begin
                ap_block_state8 <= ((connect_0_full_n = ap_const_logic_0) or (in_stream_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state12, ap_block_state12_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    connect_0_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, connect_0_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            connect_0_blk_n <= connect_0_full_n;
        else 
            connect_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    connect_0_din_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln41_reg_155, ap_block_state1, valIn_data_3_fu_96_p1, ap_block_state2, valIn_data_4_fu_101_p1, ap_block_state3, valIn_data_5_fu_106_p1, ap_block_state4, valIn_data_6_fu_111_p1, ap_block_state5, valIn_data_7_fu_116_p1, ap_block_state6, ap_block_state8, grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_din, grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_din, ap_CS_fsm_state12, ap_block_state7, valIn_data_2_fu_85_p1, valIn_data_fu_121_p1, valIn_data_1_fu_126_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8))) then 
            connect_0_din <= valIn_data_1_fu_126_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7))) then 
            connect_0_din <= valIn_data_fu_121_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6))) then 
            connect_0_din <= valIn_data_7_fu_116_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5))) then 
            connect_0_din <= valIn_data_6_fu_111_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4))) then 
            connect_0_din <= valIn_data_5_fu_106_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3))) then 
            connect_0_din <= valIn_data_4_fu_101_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2))) then 
            connect_0_din <= valIn_data_3_fu_96_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            connect_0_din <= valIn_data_2_fu_85_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln41_reg_155 = ap_const_lv1_1))) then 
            connect_0_din <= grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_din;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln41_reg_155 = ap_const_lv1_0))) then 
            connect_0_din <= grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_din;
        else 
            connect_0_din <= grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_din;
        end if; 
    end process;


    connect_0_write_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln41_reg_155, ap_block_state1, ap_block_state2, ap_block_state3, ap_block_state4, ap_block_state5, ap_block_state6, ap_block_state8, grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_write, grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_write, ap_CS_fsm_state12, ap_block_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8)))) then 
            connect_0_write <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln41_reg_155 = ap_const_lv1_1))) then 
            connect_0_write <= grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_connect_0_write;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln41_reg_155 = ap_const_lv1_0))) then 
            connect_0_write <= grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_connect_0_write;
        else 
            connect_0_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start <= grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_ap_start_reg;
    grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start <= grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_ap_start_reg;
    icmp_ln41_fu_90_p2 <= "1" when (valIn_data_2_fu_85_p1 = ap_const_lv32_0) else "0";

    in_stream_TDATA_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, in_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_stream_TDATA_blk_n <= in_stream_TVALID_int_regslice;
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= regslice_both_in_stream_U_ack_in;

    in_stream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln41_reg_155, ap_block_state1, ap_block_state2, ap_block_state3, ap_block_state4, ap_block_state5, ap_block_state6, ap_block_state8, grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_in_stream_TREADY, grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_in_stream_TREADY, ap_CS_fsm_state12, ap_block_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8)))) then 
            in_stream_TREADY_int_regslice <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln41_reg_155 = ap_const_lv1_1))) then 
            in_stream_TREADY_int_regslice <= grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_49_1_fu_76_in_stream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln41_reg_155 = ap_const_lv1_0))) then 
            in_stream_TREADY_int_regslice <= grp_AXI_DMA_SLAVE_Pipeline_VITIS_LOOP_63_2_fu_67_in_stream_TREADY;
        else 
            in_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_on_subcall_done))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    valIn_data_1_fu_126_p1 <= in_stream_TDATA_int_regslice(32 - 1 downto 0);
    valIn_data_2_fu_85_p1 <= in_stream_TDATA_int_regslice(32 - 1 downto 0);
    valIn_data_3_fu_96_p1 <= in_stream_TDATA_int_regslice(32 - 1 downto 0);
    valIn_data_4_fu_101_p1 <= in_stream_TDATA_int_regslice(32 - 1 downto 0);
    valIn_data_5_fu_106_p1 <= in_stream_TDATA_int_regslice(32 - 1 downto 0);
    valIn_data_6_fu_111_p1 <= in_stream_TDATA_int_regslice(32 - 1 downto 0);
    valIn_data_7_fu_116_p1 <= in_stream_TDATA_int_regslice(32 - 1 downto 0);
    valIn_data_fu_121_p1 <= in_stream_TDATA_int_regslice(32 - 1 downto 0);
end behav;
