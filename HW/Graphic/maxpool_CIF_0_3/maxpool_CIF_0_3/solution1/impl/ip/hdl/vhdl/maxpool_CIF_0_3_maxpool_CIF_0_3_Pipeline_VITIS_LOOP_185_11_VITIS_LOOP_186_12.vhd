-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity maxpool_CIF_0_3_maxpool_CIF_0_3_Pipeline_VITIS_LOOP_185_11_VITIS_LOOP_186_12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    IFMCH_curr_load : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln154 : IN STD_LOGIC_VECTOR (62 downto 0);
    acc_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    acc_ce1 : OUT STD_LOGIC;
    acc_we1 : OUT STD_LOGIC;
    acc_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sub131 : IN STD_LOGIC_VECTOR (31 downto 0);
    cmp132_not : IN STD_LOGIC_VECTOR (0 downto 0);
    select_ln155_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buf_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_3_ce0 : OUT STD_LOGIC;
    buf_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_3_ce1 : OUT STD_LOGIC;
    buf_3_we1 : OUT STD_LOGIC;
    buf_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_2_ce0 : OUT STD_LOGIC;
    buf_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_2_ce1 : OUT STD_LOGIC;
    buf_2_we1 : OUT STD_LOGIC;
    buf_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_1_ce0 : OUT STD_LOGIC;
    buf_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_1_ce1 : OUT STD_LOGIC;
    buf_1_we1 : OUT STD_LOGIC;
    buf_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_we1 : OUT STD_LOGIC;
    buf_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sub137 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TVALID : OUT STD_LOGIC );
end;


architecture behav of maxpool_CIF_0_3_maxpool_CIF_0_3_Pipeline_VITIS_LOOP_185_11_VITIS_LOOP_186_12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln185_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln185_fu_317_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln185_reg_530 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_addr_reg_535 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_1_addr_reg_541 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_2_addr_reg_547 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_3_addr_reg_553 : STD_LOGIC_VECTOR (5 downto 0);
    signal valOut_last_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOut_last_reg_559 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOut_last_reg_559_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_564 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_569 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_7_reg_574 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln186_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal outch_fu_98 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln186_fu_362_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal outpix_fu_102 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln185_1_fu_305_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten13_fu_106 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln185_fu_278_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln186_1_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln186_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln185_fu_287_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln185_1_fu_299_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln185_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp135_not_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge164_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln185_1_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln190_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge164_not_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_383_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_383_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln189_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln189_fu_440_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln189_1_fu_443_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln189_1_fu_449_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal valOut_data_fu_452_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln83_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_463_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal tmp_fu_383_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_383_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_383_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_383_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component maxpool_CIF_0_3_sparsemux_9_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component maxpool_CIF_0_3_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_9_2_32_1_1_U20 : component maxpool_CIF_0_3_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => buf_r_q0,
        din1 => buf_1_q0,
        din2 => buf_2_q0,
        din3 => buf_3_q0,
        def => tmp_fu_383_p9,
        sel => trunc_ln185_reg_530,
        dout => tmp_fu_383_p11);

    flow_control_loop_pipe_sequential_init_U : component maxpool_CIF_0_3_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten13_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_106 <= ap_const_lv63_0;
                elsif (((icmp_ln185_fu_273_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_106 <= add_ln185_fu_278_p2;
                end if;
            end if; 
        end if;
    end process;

    outch_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outch_fu_98 <= ap_const_lv7_0;
                elsif (((icmp_ln185_fu_273_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    outch_fu_98 <= add_ln186_fu_362_p2;
                end if;
            end if; 
        end if;
    end process;

    outpix_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outpix_fu_102 <= ap_const_lv31_0;
                elsif (((icmp_ln185_fu_273_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    outpix_fu_102 <= select_ln185_1_fu_305_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                buf_1_addr_reg_541 <= zext_ln186_fu_342_p1(6 - 1 downto 0);
                buf_2_addr_reg_547 <= zext_ln186_fu_342_p1(6 - 1 downto 0);
                buf_3_addr_reg_553 <= zext_ln186_fu_342_p1(6 - 1 downto 0);
                buf_addr_reg_535 <= zext_ln186_fu_342_p1(6 - 1 downto 0);
                trunc_ln185_reg_530 <= trunc_ln185_fu_317_p1;
                valOut_last_reg_559 <= valOut_last_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_1_reg_564 <= tmp_fu_383_p11(31 downto 31);
                tmp_6_reg_569 <= sub_ln189_fu_414_p2(31 downto 2);
                tmp_7_reg_574 <= tmp_fu_383_p11(31 downto 2);
                valOut_last_reg_559_pp0_iter2_reg <= valOut_last_reg_559;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_address1 <= zext_ln186_fu_342_p1(6 - 1 downto 0);

    acc_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_ce1 <= ap_const_logic_1;
        else 
            acc_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_d1 <= ap_const_lv32_0;

    acc_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln185_fu_273_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln185_fu_273_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_we1 <= ap_const_logic_1;
        else 
            acc_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln185_1_fu_299_p2 <= std_logic_vector(unsigned(outpix_fu_102) + unsigned(ap_const_lv31_1));
    add_ln185_fu_278_p2 <= std_logic_vector(unsigned(indvar_flatten13_fu_106) + unsigned(ap_const_lv63_1));
    add_ln186_fu_362_p2 <= std_logic_vector(unsigned(select_ln185_fu_287_p3) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, out_r_TREADY, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((out_r_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, out_r_TREADY, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((out_r_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(out_r_TREADY)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (out_r_TREADY = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln185_fu_273_p2)
    begin
        if (((icmp_ln185_fu_273_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    brmerge164_fu_331_p2 <= (tmp1_fu_326_p2 or select_ln155_1);
    brmerge164_not_fu_336_p2 <= (brmerge164_fu_331_p2 xor ap_const_lv1_1);
    buf_1_address0 <= zext_ln186_fu_342_p1(6 - 1 downto 0);
    buf_1_address1 <= buf_1_addr_reg_541;

    buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_1_ce0 <= ap_const_logic_1;
        else 
            buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_1_ce1 <= ap_const_logic_1;
        else 
            buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_d1 <= ap_const_lv32_0;

    buf_1_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln185_reg_530)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln185_reg_530 = ap_const_lv2_1))) then 
            buf_1_we1 <= ap_const_logic_1;
        else 
            buf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_address0 <= zext_ln186_fu_342_p1(6 - 1 downto 0);
    buf_2_address1 <= buf_2_addr_reg_547;

    buf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2_ce0 <= ap_const_logic_1;
        else 
            buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_2_ce1 <= ap_const_logic_1;
        else 
            buf_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_d1 <= ap_const_lv32_0;

    buf_2_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln185_reg_530)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln185_reg_530 = ap_const_lv2_2))) then 
            buf_2_we1 <= ap_const_logic_1;
        else 
            buf_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_3_address0 <= zext_ln186_fu_342_p1(6 - 1 downto 0);
    buf_3_address1 <= buf_3_addr_reg_553;

    buf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_3_ce0 <= ap_const_logic_1;
        else 
            buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_3_ce1 <= ap_const_logic_1;
        else 
            buf_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_3_d1 <= ap_const_lv32_0;

    buf_3_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln185_reg_530)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln185_reg_530 = ap_const_lv2_3))) then 
            buf_3_we1 <= ap_const_logic_1;
        else 
            buf_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_address0 <= zext_ln186_fu_342_p1(6 - 1 downto 0);
    buf_r_address1 <= buf_addr_reg_535;

    buf_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_r_ce1 <= ap_const_logic_1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_d1 <= ap_const_lv32_0;

    buf_r_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln185_reg_530)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln185_reg_530 = ap_const_lv2_0))) then 
            buf_r_we1 <= ap_const_logic_1;
        else 
            buf_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cmp135_not_fu_321_p2 <= "0" when (zext_ln185_fu_313_p1 = sub131) else "1";
    icmp_ln185_fu_273_p2 <= "1" when (indvar_flatten13_fu_106 = mul_ln154) else "0";
    icmp_ln186_fu_268_p2 <= "1" when (zext_ln186_1_fu_264_p1 = IFMCH_curr_load) else "0";
    icmp_ln190_fu_351_p2 <= "1" when (zext_ln185_1_fu_295_p1 = sub137) else "0";
    out_r_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_463_p3),64));

    out_r_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, out_r_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_r_TDATA_blk_n <= out_r_TREADY;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_r_TVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_r_TVALID <= ap_const_logic_1;
        else 
            out_r_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    select_ln185_1_fu_305_p3 <= 
        add_ln185_1_fu_299_p2 when (icmp_ln186_fu_268_p2(0) = '1') else 
        outpix_fu_102;
    select_ln185_fu_287_p3 <= 
        ap_const_lv7_0 when (icmp_ln186_fu_268_p2(0) = '1') else 
        outch_fu_98;
        sext_ln83_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(valOut_data_fu_452_p3),32));

    sub_ln189_1_fu_443_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(zext_ln189_fu_440_p1));
    sub_ln189_fu_414_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_fu_383_p11));
    tmp1_fu_326_p2 <= (cmp135_not_fu_321_p2 or cmp132_not);
    tmp_2_fu_463_p3 <= (valOut_last_reg_559_pp0_iter2_reg & sext_ln83_fu_459_p1);
    tmp_fu_383_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln185_fu_317_p1 <= select_ln185_1_fu_305_p3(2 - 1 downto 0);
    valOut_data_fu_452_p3 <= 
        sub_ln189_1_fu_443_p2 when (tmp_1_reg_564(0) = '1') else 
        zext_ln189_1_fu_449_p1;
    valOut_last_fu_356_p2 <= (icmp_ln190_fu_351_p2 and brmerge164_not_fu_336_p2);
    zext_ln185_1_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln185_fu_287_p3),32));
    zext_ln185_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln185_1_fu_305_p3),32));
    zext_ln186_1_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outch_fu_98),32));
    zext_ln186_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln185_fu_287_p3),64));
    zext_ln189_1_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_574),31));
    zext_ln189_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_569),31));
end behav;
