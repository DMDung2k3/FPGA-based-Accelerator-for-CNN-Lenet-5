// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module maxpool_CIF_0_3_maxpool_CIF_0_3_Pipeline_VITIS_LOOP_185_11_VITIS_LOOP_186_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_r_TREADY,
        IFMCH_curr_load,
        mul_ln154,
        acc_address1,
        acc_ce1,
        acc_we1,
        acc_d1,
        sub131,
        cmp132_not,
        select_ln155_1,
        buf_3_address0,
        buf_3_ce0,
        buf_3_q0,
        buf_3_address1,
        buf_3_ce1,
        buf_3_we1,
        buf_3_d1,
        buf_2_address0,
        buf_2_ce0,
        buf_2_q0,
        buf_2_address1,
        buf_2_ce1,
        buf_2_we1,
        buf_2_d1,
        buf_1_address0,
        buf_1_ce0,
        buf_1_q0,
        buf_1_address1,
        buf_1_ce1,
        buf_1_we1,
        buf_1_d1,
        buf_r_address0,
        buf_r_ce0,
        buf_r_q0,
        buf_r_address1,
        buf_r_ce1,
        buf_r_we1,
        buf_r_d1,
        sub137,
        out_r_TDATA,
        out_r_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   out_r_TREADY;
input  [31:0] IFMCH_curr_load;
input  [62:0] mul_ln154;
output  [5:0] acc_address1;
output   acc_ce1;
output   acc_we1;
output  [31:0] acc_d1;
input  [31:0] sub131;
input  [0:0] cmp132_not;
input  [0:0] select_ln155_1;
output  [5:0] buf_3_address0;
output   buf_3_ce0;
input  [31:0] buf_3_q0;
output  [5:0] buf_3_address1;
output   buf_3_ce1;
output   buf_3_we1;
output  [31:0] buf_3_d1;
output  [5:0] buf_2_address0;
output   buf_2_ce0;
input  [31:0] buf_2_q0;
output  [5:0] buf_2_address1;
output   buf_2_ce1;
output   buf_2_we1;
output  [31:0] buf_2_d1;
output  [5:0] buf_1_address0;
output   buf_1_ce0;
input  [31:0] buf_1_q0;
output  [5:0] buf_1_address1;
output   buf_1_ce1;
output   buf_1_we1;
output  [31:0] buf_1_d1;
output  [5:0] buf_r_address0;
output   buf_r_ce0;
input  [31:0] buf_r_q0;
output  [5:0] buf_r_address1;
output   buf_r_ce1;
output   buf_r_we1;
output  [31:0] buf_r_d1;
input  [31:0] sub137;
output  [63:0] out_r_TDATA;
output   out_r_TVALID;

reg ap_idle;
reg acc_ce1;
reg acc_we1;
reg buf_3_ce0;
reg buf_3_ce1;
reg buf_3_we1;
reg buf_2_ce0;
reg buf_2_ce1;
reg buf_2_we1;
reg buf_1_ce0;
reg buf_1_ce1;
reg buf_1_we1;
reg buf_r_ce0;
reg buf_r_ce1;
reg buf_r_we1;
reg out_r_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln185_fu_273_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    out_r_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln185_fu_317_p1;
reg   [1:0] trunc_ln185_reg_530;
reg   [5:0] buf_addr_reg_535;
reg   [5:0] buf_1_addr_reg_541;
reg   [5:0] buf_2_addr_reg_547;
reg   [5:0] buf_3_addr_reg_553;
wire   [0:0] valOut_last_fu_356_p2;
reg   [0:0] valOut_last_reg_559;
reg   [0:0] valOut_last_reg_559_pp0_iter2_reg;
reg   [0:0] tmp_1_reg_564;
reg   [29:0] tmp_6_reg_569;
reg   [29:0] tmp_7_reg_574;
wire   [63:0] zext_ln186_fu_342_p1;
reg   [6:0] outch_fu_98;
wire   [6:0] add_ln186_fu_362_p2;
wire    ap_loop_init;
reg   [30:0] outpix_fu_102;
wire   [30:0] select_ln185_1_fu_305_p3;
reg   [62:0] indvar_flatten13_fu_106;
wire   [62:0] add_ln185_fu_278_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln186_1_fu_264_p1;
wire   [0:0] icmp_ln186_fu_268_p2;
wire   [6:0] select_ln185_fu_287_p3;
wire   [30:0] add_ln185_1_fu_299_p2;
wire   [31:0] zext_ln185_fu_313_p1;
wire   [0:0] cmp135_not_fu_321_p2;
wire   [0:0] tmp1_fu_326_p2;
wire   [0:0] brmerge164_fu_331_p2;
wire   [31:0] zext_ln185_1_fu_295_p1;
wire   [0:0] icmp_ln190_fu_351_p2;
wire   [0:0] brmerge164_not_fu_336_p2;
wire   [31:0] tmp_fu_383_p9;
wire   [31:0] tmp_fu_383_p11;
wire   [31:0] sub_ln189_fu_414_p2;
wire   [30:0] zext_ln189_fu_440_p1;
wire   [30:0] sub_ln189_1_fu_443_p2;
wire   [30:0] zext_ln189_1_fu_449_p1;
wire   [30:0] valOut_data_fu_452_p3;
wire  signed [31:0] sext_ln83_fu_459_p1;
wire   [32:0] tmp_2_fu_463_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [1:0] tmp_fu_383_p1;
wire   [1:0] tmp_fu_383_p3;
wire  signed [1:0] tmp_fu_383_p5;
wire  signed [1:0] tmp_fu_383_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 outch_fu_98 = 7'd0;
#0 outpix_fu_102 = 31'd0;
#0 indvar_flatten13_fu_106 = 63'd0;
#0 ap_done_reg = 1'b0;
end

maxpool_CIF_0_3_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U20(
    .din0(buf_r_q0),
    .din1(buf_1_q0),
    .din2(buf_2_q0),
    .din3(buf_3_q0),
    .def(tmp_fu_383_p9),
    .sel(trunc_ln185_reg_530),
    .dout(tmp_fu_383_p11)
);

maxpool_CIF_0_3_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_106 <= 63'd0;
        end else if (((icmp_ln185_fu_273_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten13_fu_106 <= add_ln185_fu_278_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outch_fu_98 <= 7'd0;
        end else if (((icmp_ln185_fu_273_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            outch_fu_98 <= add_ln186_fu_362_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outpix_fu_102 <= 31'd0;
        end else if (((icmp_ln185_fu_273_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            outpix_fu_102 <= select_ln185_1_fu_305_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        buf_1_addr_reg_541 <= zext_ln186_fu_342_p1;
        buf_2_addr_reg_547 <= zext_ln186_fu_342_p1;
        buf_3_addr_reg_553 <= zext_ln186_fu_342_p1;
        buf_addr_reg_535 <= zext_ln186_fu_342_p1;
        trunc_ln185_reg_530 <= trunc_ln185_fu_317_p1;
        valOut_last_reg_559 <= valOut_last_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_1_reg_564 <= tmp_fu_383_p11[32'd31];
        tmp_6_reg_569 <= {{sub_ln189_fu_414_p2[31:2]}};
        tmp_7_reg_574 <= {{tmp_fu_383_p11[31:2]}};
        valOut_last_reg_559_pp0_iter2_reg <= valOut_last_reg_559;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_ce1 = 1'b1;
    end else begin
        acc_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_fu_273_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_we1 = 1'b1;
    end else begin
        acc_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_fu_273_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_1_ce0 = 1'b1;
    end else begin
        buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_1_ce1 = 1'b1;
    end else begin
        buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln185_reg_530 == 2'd1))) begin
        buf_1_we1 = 1'b1;
    end else begin
        buf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_2_ce0 = 1'b1;
    end else begin
        buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_2_ce1 = 1'b1;
    end else begin
        buf_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln185_reg_530 == 2'd2))) begin
        buf_2_we1 = 1'b1;
    end else begin
        buf_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_3_ce0 = 1'b1;
    end else begin
        buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_3_ce1 = 1'b1;
    end else begin
        buf_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln185_reg_530 == 2'd3))) begin
        buf_3_we1 = 1'b1;
    end else begin
        buf_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_r_ce1 = 1'b1;
    end else begin
        buf_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln185_reg_530 == 2'd0))) begin
        buf_r_we1 = 1'b1;
    end else begin
        buf_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_r_TDATA_blk_n = out_r_TREADY;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_r_TVALID = 1'b1;
    end else begin
        out_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_address1 = zext_ln186_fu_342_p1;

assign acc_d1 = 32'd0;

assign add_ln185_1_fu_299_p2 = (outpix_fu_102 + 31'd1);

assign add_ln185_fu_278_p2 = (indvar_flatten13_fu_106 + 63'd1);

assign add_ln186_fu_362_p2 = (select_ln185_fu_287_p3 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & ((out_r_TREADY == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & ((out_r_TREADY == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (out_r_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign brmerge164_fu_331_p2 = (tmp1_fu_326_p2 | select_ln155_1);

assign brmerge164_not_fu_336_p2 = (brmerge164_fu_331_p2 ^ 1'd1);

assign buf_1_address0 = zext_ln186_fu_342_p1;

assign buf_1_address1 = buf_1_addr_reg_541;

assign buf_1_d1 = 32'd0;

assign buf_2_address0 = zext_ln186_fu_342_p1;

assign buf_2_address1 = buf_2_addr_reg_547;

assign buf_2_d1 = 32'd0;

assign buf_3_address0 = zext_ln186_fu_342_p1;

assign buf_3_address1 = buf_3_addr_reg_553;

assign buf_3_d1 = 32'd0;

assign buf_r_address0 = zext_ln186_fu_342_p1;

assign buf_r_address1 = buf_addr_reg_535;

assign buf_r_d1 = 32'd0;

assign cmp135_not_fu_321_p2 = ((zext_ln185_fu_313_p1 != sub131) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_273_p2 = ((indvar_flatten13_fu_106 == mul_ln154) ? 1'b1 : 1'b0);

assign icmp_ln186_fu_268_p2 = ((zext_ln186_1_fu_264_p1 == IFMCH_curr_load) ? 1'b1 : 1'b0);

assign icmp_ln190_fu_351_p2 = ((zext_ln185_1_fu_295_p1 == sub137) ? 1'b1 : 1'b0);

assign out_r_TDATA = tmp_2_fu_463_p3;

assign select_ln185_1_fu_305_p3 = ((icmp_ln186_fu_268_p2[0:0] == 1'b1) ? add_ln185_1_fu_299_p2 : outpix_fu_102);

assign select_ln185_fu_287_p3 = ((icmp_ln186_fu_268_p2[0:0] == 1'b1) ? 7'd0 : outch_fu_98);

assign sext_ln83_fu_459_p1 = $signed(valOut_data_fu_452_p3);

assign sub_ln189_1_fu_443_p2 = (31'd0 - zext_ln189_fu_440_p1);

assign sub_ln189_fu_414_p2 = (32'd0 - tmp_fu_383_p11);

assign tmp1_fu_326_p2 = (cmp135_not_fu_321_p2 | cmp132_not);

assign tmp_2_fu_463_p3 = {{valOut_last_reg_559_pp0_iter2_reg}, {sext_ln83_fu_459_p1}};

assign tmp_fu_383_p9 = 'bx;

assign trunc_ln185_fu_317_p1 = select_ln185_1_fu_305_p3[1:0];

assign valOut_data_fu_452_p3 = ((tmp_1_reg_564[0:0] == 1'b1) ? sub_ln189_1_fu_443_p2 : zext_ln189_1_fu_449_p1);

assign valOut_last_fu_356_p2 = (icmp_ln190_fu_351_p2 & brmerge164_not_fu_336_p2);

assign zext_ln185_1_fu_295_p1 = select_ln185_fu_287_p3;

assign zext_ln185_fu_313_p1 = select_ln185_1_fu_305_p3;

assign zext_ln186_1_fu_264_p1 = outch_fu_98;

assign zext_ln186_fu_342_p1 = select_ln185_fu_287_p3;

assign zext_ln189_1_fu_449_p1 = tmp_7_reg_574;

assign zext_ln189_fu_440_p1 = tmp_6_reg_569;

endmodule //maxpool_CIF_0_3_maxpool_CIF_0_3_Pipeline_VITIS_LOOP_185_11_VITIS_LOOP_186_12
