-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity maxpool_CIF_0_2_maxpool_CIF_0_2_Pipeline_VITIS_LOOP_171_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_7_ce0 : OUT STD_LOGIC;
    buf_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_7_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_7_ce1 : OUT STD_LOGIC;
    buf_7_we1 : OUT STD_LOGIC;
    buf_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_6_ce0 : OUT STD_LOGIC;
    buf_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_6_ce1 : OUT STD_LOGIC;
    buf_6_we1 : OUT STD_LOGIC;
    buf_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_5_ce0 : OUT STD_LOGIC;
    buf_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_5_ce1 : OUT STD_LOGIC;
    buf_5_we1 : OUT STD_LOGIC;
    buf_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_4_ce0 : OUT STD_LOGIC;
    buf_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_4_ce1 : OUT STD_LOGIC;
    buf_4_we1 : OUT STD_LOGIC;
    buf_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_3_ce0 : OUT STD_LOGIC;
    buf_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_3_ce1 : OUT STD_LOGIC;
    buf_3_we1 : OUT STD_LOGIC;
    buf_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_2_ce0 : OUT STD_LOGIC;
    buf_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_2_ce1 : OUT STD_LOGIC;
    buf_2_we1 : OUT STD_LOGIC;
    buf_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_1_ce0 : OUT STD_LOGIC;
    buf_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_1_ce1 : OUT STD_LOGIC;
    buf_1_we1 : OUT STD_LOGIC;
    buf_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_we1 : OUT STD_LOGIC;
    buf_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (2 downto 0);
    acc_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    acc_ce1 : OUT STD_LOGIC;
    acc_we1 : OUT STD_LOGIC;
    acc_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of maxpool_CIF_0_2_maxpool_CIF_0_2_Pipeline_VITIS_LOOP_171_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln171_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_reg_328 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal buf_addr_reg_337 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_addr_reg_337_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_1_addr_reg_343 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_1_addr_reg_343_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_2_addr_reg_349 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_2_addr_reg_349_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_3_addr_reg_355 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_3_addr_reg_355_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_4_addr_reg_361 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_4_addr_reg_361_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_5_addr_reg_367 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_5_addr_reg_367_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_6_addr_reg_373 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_6_addr_reg_373_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_7_addr_reg_379 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_7_addr_reg_379_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln178_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln178_reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln171_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ch_fu_74 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln171_fu_252_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_ch_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_276_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_276_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal tmp_1_fu_276_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_276_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_276_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_276_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_276_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_276_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_276_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_276_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component maxpool_CIF_0_2_sparsemux_17_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component maxpool_CIF_0_2_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_17_3_32_1_1_U16 : component maxpool_CIF_0_2_sparsemux_17_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 32,
        CASE1 => "001",
        din1_WIDTH => 32,
        CASE2 => "010",
        din2_WIDTH => 32,
        CASE3 => "011",
        din3_WIDTH => 32,
        CASE4 => "100",
        din4_WIDTH => 32,
        CASE5 => "101",
        din5_WIDTH => 32,
        CASE6 => "110",
        din6_WIDTH => 32,
        CASE7 => "111",
        din7_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => buf_r_q0,
        din1 => buf_1_q0,
        din2 => buf_2_q0,
        din3 => buf_3_q0,
        din4 => buf_4_q0,
        din5 => buf_5_q0,
        din6 => buf_6_q0,
        din7 => buf_7_q0,
        def => tmp_1_fu_276_p17,
        sel => empty,
        dout => tmp_1_fu_276_p19);

    flow_control_loop_pipe_sequential_init_U : component maxpool_CIF_0_2_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ch_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln171_fu_246_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ch_fu_74 <= add_ln171_fu_252_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ch_fu_74 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln178_reg_390 <= add_ln178_fu_315_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                buf_1_addr_reg_343 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
                buf_1_addr_reg_343_pp0_iter1_reg <= buf_1_addr_reg_343;
                buf_2_addr_reg_349 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
                buf_2_addr_reg_349_pp0_iter1_reg <= buf_2_addr_reg_349;
                buf_3_addr_reg_355 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
                buf_3_addr_reg_355_pp0_iter1_reg <= buf_3_addr_reg_355;
                buf_4_addr_reg_361 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
                buf_4_addr_reg_361_pp0_iter1_reg <= buf_4_addr_reg_361;
                buf_5_addr_reg_367 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
                buf_5_addr_reg_367_pp0_iter1_reg <= buf_5_addr_reg_367;
                buf_6_addr_reg_373 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
                buf_6_addr_reg_373_pp0_iter1_reg <= buf_6_addr_reg_373;
                buf_7_addr_reg_379 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
                buf_7_addr_reg_379_pp0_iter1_reg <= buf_7_addr_reg_379;
                buf_addr_reg_337 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
                buf_addr_reg_337_pp0_iter1_reg <= buf_addr_reg_337;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_address1 <= zext_ln171_fu_258_p1(5 - 1 downto 0);

    acc_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln171_fu_246_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_246_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_ce1 <= ap_const_logic_1;
        else 
            acc_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_d1 <= ap_const_lv32_0;

    acc_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln171_fu_246_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_246_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_we1 <= ap_const_logic_1;
        else 
            acc_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln171_fu_252_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ch_1) + unsigned(ap_const_lv6_1));
    add_ln178_fu_315_p2 <= std_logic_vector(unsigned(acc_q1) + unsigned(tmp_1_fu_276_p19));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln171_fu_246_p2)
    begin
        if (((icmp_ln171_fu_246_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ch_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ch_fu_74, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_ch_1 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_ch_1 <= ch_fu_74;
        end if; 
    end process;

    buf_1_address0 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
    buf_1_address1 <= buf_1_addr_reg_343_pp0_iter1_reg;

    buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_1_ce0 <= ap_const_logic_1;
        else 
            buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_1_ce1 <= ap_const_logic_1;
        else 
            buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_d1 <= add_ln178_reg_390;

    buf_1_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_328, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_328 = ap_const_lv3_1))) then 
            buf_1_we1 <= ap_const_logic_1;
        else 
            buf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_address0 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
    buf_2_address1 <= buf_2_addr_reg_349_pp0_iter1_reg;

    buf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2_ce0 <= ap_const_logic_1;
        else 
            buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_2_ce1 <= ap_const_logic_1;
        else 
            buf_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_d1 <= add_ln178_reg_390;

    buf_2_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_328, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_328 = ap_const_lv3_2))) then 
            buf_2_we1 <= ap_const_logic_1;
        else 
            buf_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_3_address0 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
    buf_3_address1 <= buf_3_addr_reg_355_pp0_iter1_reg;

    buf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_3_ce0 <= ap_const_logic_1;
        else 
            buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_3_ce1 <= ap_const_logic_1;
        else 
            buf_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_3_d1 <= add_ln178_reg_390;

    buf_3_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_328, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_328 = ap_const_lv3_3))) then 
            buf_3_we1 <= ap_const_logic_1;
        else 
            buf_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_4_address0 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
    buf_4_address1 <= buf_4_addr_reg_361_pp0_iter1_reg;

    buf_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_4_ce0 <= ap_const_logic_1;
        else 
            buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_4_ce1 <= ap_const_logic_1;
        else 
            buf_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_4_d1 <= add_ln178_reg_390;

    buf_4_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_328, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_328 = ap_const_lv3_4))) then 
            buf_4_we1 <= ap_const_logic_1;
        else 
            buf_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_5_address0 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
    buf_5_address1 <= buf_5_addr_reg_367_pp0_iter1_reg;

    buf_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_5_ce0 <= ap_const_logic_1;
        else 
            buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_5_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_5_ce1 <= ap_const_logic_1;
        else 
            buf_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_5_d1 <= add_ln178_reg_390;

    buf_5_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_328, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_328 = ap_const_lv3_5))) then 
            buf_5_we1 <= ap_const_logic_1;
        else 
            buf_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_6_address0 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
    buf_6_address1 <= buf_6_addr_reg_373_pp0_iter1_reg;

    buf_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_6_ce0 <= ap_const_logic_1;
        else 
            buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_6_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_6_ce1 <= ap_const_logic_1;
        else 
            buf_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_6_d1 <= add_ln178_reg_390;

    buf_6_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_328, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_328 = ap_const_lv3_6))) then 
            buf_6_we1 <= ap_const_logic_1;
        else 
            buf_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_7_address0 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
    buf_7_address1 <= buf_7_addr_reg_379_pp0_iter1_reg;

    buf_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_7_ce0 <= ap_const_logic_1;
        else 
            buf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_7_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_7_ce1 <= ap_const_logic_1;
        else 
            buf_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_7_d1 <= add_ln178_reg_390;

    buf_7_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_328, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_328 = ap_const_lv3_7))) then 
            buf_7_we1 <= ap_const_logic_1;
        else 
            buf_7_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_address0 <= zext_ln171_fu_258_p1(5 - 1 downto 0);
    buf_r_address1 <= buf_addr_reg_337_pp0_iter1_reg;

    buf_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_r_ce1 <= ap_const_logic_1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_d1 <= add_ln178_reg_390;

    buf_r_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_328, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_328 = ap_const_lv3_0))) then 
            buf_r_we1 <= ap_const_logic_1;
        else 
            buf_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln171_fu_246_p2 <= "1" when (ap_sig_allocacmp_ch_1 = ap_const_lv6_20) else "0";
    tmp_1_fu_276_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_reg_328 <= empty;
    zext_ln171_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_ch_1),64));
end behav;
