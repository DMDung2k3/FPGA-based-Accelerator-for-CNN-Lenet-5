-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity maxPool_CIF_0_1_maxPool_CIF_0_1_Pipeline_VITIS_LOOP_139_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_15_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_15_ce1 : OUT STD_LOGIC;
    buf_15_we1 : OUT STD_LOGIC;
    buf_15_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_14_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_14_ce1 : OUT STD_LOGIC;
    buf_14_we1 : OUT STD_LOGIC;
    buf_14_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_13_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_13_ce1 : OUT STD_LOGIC;
    buf_13_we1 : OUT STD_LOGIC;
    buf_13_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_12_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_12_ce1 : OUT STD_LOGIC;
    buf_12_we1 : OUT STD_LOGIC;
    buf_12_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_11_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_11_ce1 : OUT STD_LOGIC;
    buf_11_we1 : OUT STD_LOGIC;
    buf_11_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_10_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_10_ce1 : OUT STD_LOGIC;
    buf_10_we1 : OUT STD_LOGIC;
    buf_10_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_9_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_9_ce1 : OUT STD_LOGIC;
    buf_9_we1 : OUT STD_LOGIC;
    buf_9_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_8_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_8_ce1 : OUT STD_LOGIC;
    buf_8_we1 : OUT STD_LOGIC;
    buf_8_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_7_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_7_ce1 : OUT STD_LOGIC;
    buf_7_we1 : OUT STD_LOGIC;
    buf_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_6_ce1 : OUT STD_LOGIC;
    buf_6_we1 : OUT STD_LOGIC;
    buf_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_5_ce1 : OUT STD_LOGIC;
    buf_5_we1 : OUT STD_LOGIC;
    buf_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_4_ce1 : OUT STD_LOGIC;
    buf_4_we1 : OUT STD_LOGIC;
    buf_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_3_ce1 : OUT STD_LOGIC;
    buf_3_we1 : OUT STD_LOGIC;
    buf_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_2_ce1 : OUT STD_LOGIC;
    buf_2_we1 : OUT STD_LOGIC;
    buf_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_1_ce1 : OUT STD_LOGIC;
    buf_1_we1 : OUT STD_LOGIC;
    buf_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_we1 : OUT STD_LOGIC;
    buf_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of maxPool_CIF_0_1_maxPool_CIF_0_1_Pipeline_VITIS_LOOP_139_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_FFF0BDC1 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111100001011110111000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln139_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln139_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_68 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln139_fu_374_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component maxPool_CIF_0_1_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component maxPool_CIF_0_1_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    j_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln139_fu_368_p2 = ap_const_lv1_0)) then 
                    j_fu_68 <= add_ln139_fu_374_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_68 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln139_fu_374_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_state1, j_fu_68, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_68;
        end if; 
    end process;

    buf_10_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_10_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_10_ce1 <= ap_const_logic_1;
        else 
            buf_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_10_d1 <= ap_const_lv32_FFF0BDC1;

    buf_10_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_10_we1 <= ap_const_logic_1;
        else 
            buf_10_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_11_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_11_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_11_ce1 <= ap_const_logic_1;
        else 
            buf_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_11_d1 <= ap_const_lv32_FFF0BDC1;

    buf_11_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_11_we1 <= ap_const_logic_1;
        else 
            buf_11_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_12_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_12_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_12_ce1 <= ap_const_logic_1;
        else 
            buf_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_12_d1 <= ap_const_lv32_FFF0BDC1;

    buf_12_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_12_we1 <= ap_const_logic_1;
        else 
            buf_12_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_13_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_13_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_13_ce1 <= ap_const_logic_1;
        else 
            buf_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_13_d1 <= ap_const_lv32_FFF0BDC1;

    buf_13_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_13_we1 <= ap_const_logic_1;
        else 
            buf_13_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_14_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_14_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_14_ce1 <= ap_const_logic_1;
        else 
            buf_14_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_14_d1 <= ap_const_lv32_FFF0BDC1;

    buf_14_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_14_we1 <= ap_const_logic_1;
        else 
            buf_14_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_15_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_15_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_15_ce1 <= ap_const_logic_1;
        else 
            buf_15_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_15_d1 <= ap_const_lv32_FFF0BDC1;

    buf_15_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_15_we1 <= ap_const_logic_1;
        else 
            buf_15_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_1_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_1_ce1 <= ap_const_logic_1;
        else 
            buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_d1 <= ap_const_lv32_FFF0BDC1;

    buf_1_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_1_we1 <= ap_const_logic_1;
        else 
            buf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_2_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_2_ce1 <= ap_const_logic_1;
        else 
            buf_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_d1 <= ap_const_lv32_FFF0BDC1;

    buf_2_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_2_we1 <= ap_const_logic_1;
        else 
            buf_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_3_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_3_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_3_ce1 <= ap_const_logic_1;
        else 
            buf_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_3_d1 <= ap_const_lv32_FFF0BDC1;

    buf_3_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_3_we1 <= ap_const_logic_1;
        else 
            buf_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_4_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_4_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_4_ce1 <= ap_const_logic_1;
        else 
            buf_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_4_d1 <= ap_const_lv32_FFF0BDC1;

    buf_4_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_4_we1 <= ap_const_logic_1;
        else 
            buf_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_5_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_5_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_5_ce1 <= ap_const_logic_1;
        else 
            buf_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_5_d1 <= ap_const_lv32_FFF0BDC1;

    buf_5_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_5_we1 <= ap_const_logic_1;
        else 
            buf_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_6_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_6_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_6_ce1 <= ap_const_logic_1;
        else 
            buf_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_6_d1 <= ap_const_lv32_FFF0BDC1;

    buf_6_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_6_we1 <= ap_const_logic_1;
        else 
            buf_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_7_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_7_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_7_ce1 <= ap_const_logic_1;
        else 
            buf_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_7_d1 <= ap_const_lv32_FFF0BDC1;

    buf_7_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_7_we1 <= ap_const_logic_1;
        else 
            buf_7_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_8_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_8_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_8_ce1 <= ap_const_logic_1;
        else 
            buf_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_8_d1 <= ap_const_lv32_FFF0BDC1;

    buf_8_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_8_we1 <= ap_const_logic_1;
        else 
            buf_8_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_9_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_9_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_9_ce1 <= ap_const_logic_1;
        else 
            buf_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_9_d1 <= ap_const_lv32_FFF0BDC1;

    buf_9_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_9_we1 <= ap_const_logic_1;
        else 
            buf_9_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_address1 <= zext_ln139_fu_380_p1(5 - 1 downto 0);

    buf_r_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_r_ce1 <= ap_const_logic_1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_d1 <= ap_const_lv32_FFF0BDC1;

    buf_r_we1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln139_fu_368_p2)
    begin
        if (((icmp_ln139_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_r_we1 <= ap_const_logic_1;
        else 
            buf_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln139_fu_368_p2 <= "1" when (ap_sig_allocacmp_j_1 = ap_const_lv6_20) else "0";
    zext_ln139_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),64));
end behav;
