// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module maxPool_CIF_0_1_maxPool_CIF_0_1_Pipeline_VITIS_LOOP_139_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_15_address1,
        buf_15_ce1,
        buf_15_we1,
        buf_15_d1,
        buf_14_address1,
        buf_14_ce1,
        buf_14_we1,
        buf_14_d1,
        buf_13_address1,
        buf_13_ce1,
        buf_13_we1,
        buf_13_d1,
        buf_12_address1,
        buf_12_ce1,
        buf_12_we1,
        buf_12_d1,
        buf_11_address1,
        buf_11_ce1,
        buf_11_we1,
        buf_11_d1,
        buf_10_address1,
        buf_10_ce1,
        buf_10_we1,
        buf_10_d1,
        buf_9_address1,
        buf_9_ce1,
        buf_9_we1,
        buf_9_d1,
        buf_8_address1,
        buf_8_ce1,
        buf_8_we1,
        buf_8_d1,
        buf_7_address1,
        buf_7_ce1,
        buf_7_we1,
        buf_7_d1,
        buf_6_address1,
        buf_6_ce1,
        buf_6_we1,
        buf_6_d1,
        buf_5_address1,
        buf_5_ce1,
        buf_5_we1,
        buf_5_d1,
        buf_4_address1,
        buf_4_ce1,
        buf_4_we1,
        buf_4_d1,
        buf_3_address1,
        buf_3_ce1,
        buf_3_we1,
        buf_3_d1,
        buf_2_address1,
        buf_2_ce1,
        buf_2_we1,
        buf_2_d1,
        buf_1_address1,
        buf_1_ce1,
        buf_1_we1,
        buf_1_d1,
        buf_r_address1,
        buf_r_ce1,
        buf_r_we1,
        buf_r_d1
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] buf_15_address1;
output   buf_15_ce1;
output   buf_15_we1;
output  [31:0] buf_15_d1;
output  [4:0] buf_14_address1;
output   buf_14_ce1;
output   buf_14_we1;
output  [31:0] buf_14_d1;
output  [4:0] buf_13_address1;
output   buf_13_ce1;
output   buf_13_we1;
output  [31:0] buf_13_d1;
output  [4:0] buf_12_address1;
output   buf_12_ce1;
output   buf_12_we1;
output  [31:0] buf_12_d1;
output  [4:0] buf_11_address1;
output   buf_11_ce1;
output   buf_11_we1;
output  [31:0] buf_11_d1;
output  [4:0] buf_10_address1;
output   buf_10_ce1;
output   buf_10_we1;
output  [31:0] buf_10_d1;
output  [4:0] buf_9_address1;
output   buf_9_ce1;
output   buf_9_we1;
output  [31:0] buf_9_d1;
output  [4:0] buf_8_address1;
output   buf_8_ce1;
output   buf_8_we1;
output  [31:0] buf_8_d1;
output  [4:0] buf_7_address1;
output   buf_7_ce1;
output   buf_7_we1;
output  [31:0] buf_7_d1;
output  [4:0] buf_6_address1;
output   buf_6_ce1;
output   buf_6_we1;
output  [31:0] buf_6_d1;
output  [4:0] buf_5_address1;
output   buf_5_ce1;
output   buf_5_we1;
output  [31:0] buf_5_d1;
output  [4:0] buf_4_address1;
output   buf_4_ce1;
output   buf_4_we1;
output  [31:0] buf_4_d1;
output  [4:0] buf_3_address1;
output   buf_3_ce1;
output   buf_3_we1;
output  [31:0] buf_3_d1;
output  [4:0] buf_2_address1;
output   buf_2_ce1;
output   buf_2_we1;
output  [31:0] buf_2_d1;
output  [4:0] buf_1_address1;
output   buf_1_ce1;
output   buf_1_we1;
output  [31:0] buf_1_d1;
output  [4:0] buf_r_address1;
output   buf_r_ce1;
output   buf_r_we1;
output  [31:0] buf_r_d1;

reg ap_idle;
reg buf_15_ce1;
reg buf_15_we1;
reg buf_14_ce1;
reg buf_14_we1;
reg buf_13_ce1;
reg buf_13_we1;
reg buf_12_ce1;
reg buf_12_we1;
reg buf_11_ce1;
reg buf_11_we1;
reg buf_10_ce1;
reg buf_10_we1;
reg buf_9_ce1;
reg buf_9_we1;
reg buf_8_ce1;
reg buf_8_we1;
reg buf_7_ce1;
reg buf_7_we1;
reg buf_6_ce1;
reg buf_6_we1;
reg buf_5_ce1;
reg buf_5_we1;
reg buf_4_ce1;
reg buf_4_we1;
reg buf_3_ce1;
reg buf_3_we1;
reg buf_2_ce1;
reg buf_2_we1;
reg buf_1_ce1;
reg buf_1_we1;
reg buf_r_ce1;
reg buf_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln139_fu_368_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln139_fu_380_p1;
reg   [5:0] j_fu_68;
wire   [5:0] add_ln139_fu_374_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_j_1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 j_fu_68 = 6'd0;
#0 ap_done_reg = 1'b0;
end

maxPool_CIF_0_1_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln139_fu_368_p2 == 1'd0)) begin
            j_fu_68 <= add_ln139_fu_374_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_68 <= 6'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1 = 6'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_10_ce1 = 1'b1;
    end else begin
        buf_10_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_10_we1 = 1'b1;
    end else begin
        buf_10_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_11_ce1 = 1'b1;
    end else begin
        buf_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_11_we1 = 1'b1;
    end else begin
        buf_11_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_12_ce1 = 1'b1;
    end else begin
        buf_12_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_12_we1 = 1'b1;
    end else begin
        buf_12_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_13_ce1 = 1'b1;
    end else begin
        buf_13_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_13_we1 = 1'b1;
    end else begin
        buf_13_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_14_ce1 = 1'b1;
    end else begin
        buf_14_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_14_we1 = 1'b1;
    end else begin
        buf_14_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_15_ce1 = 1'b1;
    end else begin
        buf_15_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_15_we1 = 1'b1;
    end else begin
        buf_15_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_1_ce1 = 1'b1;
    end else begin
        buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_1_we1 = 1'b1;
    end else begin
        buf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_2_ce1 = 1'b1;
    end else begin
        buf_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_2_we1 = 1'b1;
    end else begin
        buf_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_3_ce1 = 1'b1;
    end else begin
        buf_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_3_we1 = 1'b1;
    end else begin
        buf_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_4_ce1 = 1'b1;
    end else begin
        buf_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_4_we1 = 1'b1;
    end else begin
        buf_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_5_ce1 = 1'b1;
    end else begin
        buf_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_5_we1 = 1'b1;
    end else begin
        buf_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_6_ce1 = 1'b1;
    end else begin
        buf_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_6_we1 = 1'b1;
    end else begin
        buf_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_7_ce1 = 1'b1;
    end else begin
        buf_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_7_we1 = 1'b1;
    end else begin
        buf_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_8_ce1 = 1'b1;
    end else begin
        buf_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_8_we1 = 1'b1;
    end else begin
        buf_8_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_9_ce1 = 1'b1;
    end else begin
        buf_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_9_we1 = 1'b1;
    end else begin
        buf_9_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_r_ce1 = 1'b1;
    end else begin
        buf_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_368_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_r_we1 = 1'b1;
    end else begin
        buf_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln139_fu_374_p2 = (ap_sig_allocacmp_j_1 + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buf_10_address1 = zext_ln139_fu_380_p1;

assign buf_10_d1 = 32'd4293967297;

assign buf_11_address1 = zext_ln139_fu_380_p1;

assign buf_11_d1 = 32'd4293967297;

assign buf_12_address1 = zext_ln139_fu_380_p1;

assign buf_12_d1 = 32'd4293967297;

assign buf_13_address1 = zext_ln139_fu_380_p1;

assign buf_13_d1 = 32'd4293967297;

assign buf_14_address1 = zext_ln139_fu_380_p1;

assign buf_14_d1 = 32'd4293967297;

assign buf_15_address1 = zext_ln139_fu_380_p1;

assign buf_15_d1 = 32'd4293967297;

assign buf_1_address1 = zext_ln139_fu_380_p1;

assign buf_1_d1 = 32'd4293967297;

assign buf_2_address1 = zext_ln139_fu_380_p1;

assign buf_2_d1 = 32'd4293967297;

assign buf_3_address1 = zext_ln139_fu_380_p1;

assign buf_3_d1 = 32'd4293967297;

assign buf_4_address1 = zext_ln139_fu_380_p1;

assign buf_4_d1 = 32'd4293967297;

assign buf_5_address1 = zext_ln139_fu_380_p1;

assign buf_5_d1 = 32'd4293967297;

assign buf_6_address1 = zext_ln139_fu_380_p1;

assign buf_6_d1 = 32'd4293967297;

assign buf_7_address1 = zext_ln139_fu_380_p1;

assign buf_7_d1 = 32'd4293967297;

assign buf_8_address1 = zext_ln139_fu_380_p1;

assign buf_8_d1 = 32'd4293967297;

assign buf_9_address1 = zext_ln139_fu_380_p1;

assign buf_9_d1 = 32'd4293967297;

assign buf_r_address1 = zext_ln139_fu_380_p1;

assign buf_r_d1 = 32'd4293967297;

assign icmp_ln139_fu_368_p2 = ((ap_sig_allocacmp_j_1 == 6'd32) ? 1'b1 : 1'b0);

assign zext_ln139_fu_380_p1 = ap_sig_allocacmp_j_1;

endmodule //maxPool_CIF_0_1_maxPool_CIF_0_1_Pipeline_VITIS_LOOP_139_1
