// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module LeNet_wrapper_AXI_DMA_MASTER (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        connect_8_dout,
        connect_8_num_data_valid,
        connect_8_fifo_cap,
        connect_8_empty_n,
        connect_8_read,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] connect_8_dout;
input  [6:0] connect_8_num_data_valid;
input  [6:0] connect_8_fifo_cap;
input   connect_8_empty_n;
output   connect_8_read;
output  [63:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg connect_8_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    connect_8_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln13_fu_87_p1;
reg    ap_block_state1;
wire   [0:0] icmp_ln50_fu_92_p2;
reg   [0:0] icmp_ln50_reg_174;
reg  signed [31:0] valIn_35_reg_178;
reg    ap_block_state2;
wire   [63:0] zext_ln18_fu_98_p1;
reg  signed [31:0] valIn_36_reg_188;
reg    ap_block_state3;
wire   [63:0] zext_ln23_fu_103_p1;
reg  signed [31:0] valIn_37_reg_199;
reg    ap_block_state4;
wire   [63:0] zext_ln28_fu_108_p1;
wire   [63:0] zext_ln33_fu_113_p1;
reg    ap_block_state5;
reg  signed [31:0] valIn_39_reg_214;
reg    ap_block_state6;
wire   [63:0] zext_ln38_fu_118_p1;
reg  signed [31:0] valIn_40_reg_225;
reg    ap_block_state7;
wire   [63:0] zext_ln43_fu_123_p1;
wire   [63:0] zext_ln48_fu_128_p1;
reg    ap_block_state8;
wire  signed [31:0] KER_size_0_fu_133_p2;
reg  signed [31:0] KER_size_0_reg_241;
wire  signed [31:0] OFM_size_0_fu_137_p2;
reg  signed [31:0] OFM_size_0_reg_246;
wire  signed [31:0] KER_size_1_fu_141_p2;
reg  signed [31:0] KER_size_1_reg_251;
wire    ap_CS_fsm_state10;
wire   [31:0] KER_bound_fu_145_p2;
reg   [31:0] KER_bound_reg_256;
wire    ap_CS_fsm_state11;
wire   [31:0] sub56_fu_149_p2;
reg   [31:0] sub56_reg_262;
wire    ap_CS_fsm_state12;
wire  signed [31:0] OFM_size_1_fu_155_p2;
reg  signed [31:0] OFM_size_1_reg_267;
wire    ap_CS_fsm_state14;
wire   [31:0] OFM_bound_fu_159_p2;
reg   [31:0] OFM_bound_reg_272;
wire    ap_CS_fsm_state15;
wire   [31:0] sub_fu_163_p2;
reg   [31:0] sub_reg_278;
wire    ap_CS_fsm_state16;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_done;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_idle;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_ready;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_connect_8_read;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TREADY;
wire   [63:0] grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TDATA;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TVALID;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_done;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_idle;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_ready;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_connect_8_read;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TREADY;
wire   [63:0] grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TDATA;
wire    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TVALID;
reg    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start_reg;
wire    ap_CS_fsm_state13;
reg    grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start_reg;
wire    ap_CS_fsm_state17;
wire  signed [31:0] zext_ln18_fu_98_p0;
wire  signed [31:0] zext_ln23_fu_103_p0;
wire  signed [31:0] zext_ln28_fu_108_p0;
wire  signed [31:0] zext_ln38_fu_118_p0;
wire  signed [31:0] zext_ln43_fu_123_p0;
wire    ap_CS_fsm_state18;
wire    regslice_both_out_stream_U_apdone_blk;
reg   [17:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg   [63:0] out_stream_TDATA_int_regslice;
reg    out_stream_TVALID_int_regslice;
wire    out_stream_TREADY_int_regslice;
wire    regslice_both_out_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 18'd1;
#0 grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start_reg = 1'b0;
#0 grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start_reg = 1'b0;
end

LeNet_wrapper_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2 grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start),
    .ap_done(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_done),
    .ap_idle(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_idle),
    .ap_ready(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_ready),
    .connect_8_dout(connect_8_dout),
    .connect_8_num_data_valid(7'd0),
    .connect_8_fifo_cap(7'd0),
    .connect_8_empty_n(connect_8_empty_n),
    .connect_8_read(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_connect_8_read),
    .out_stream_TREADY(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TREADY),
    .KER_bound(KER_bound_reg_256),
    .sub56(sub56_reg_262),
    .out_stream_TDATA(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TDATA),
    .out_stream_TVALID(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TVALID)
);

LeNet_wrapper_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1 grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start),
    .ap_done(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_done),
    .ap_idle(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_idle),
    .ap_ready(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_ready),
    .connect_8_dout(connect_8_dout),
    .connect_8_num_data_valid(7'd0),
    .connect_8_fifo_cap(7'd0),
    .connect_8_empty_n(connect_8_empty_n),
    .connect_8_read(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_connect_8_read),
    .out_stream_TREADY(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TREADY),
    .OFM_bound(OFM_bound_reg_272),
    .sub(sub_reg_278),
    .out_stream_TDATA(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TDATA),
    .out_stream_TVALID(grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TVALID)
);

LeNet_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U712(
    .din0(valIn_39_reg_214),
    .din1(valIn_36_reg_188),
    .dout(KER_size_0_fu_133_p2)
);

LeNet_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U713(
    .din0(valIn_40_reg_225),
    .din1(valIn_39_reg_214),
    .dout(OFM_size_0_fu_137_p2)
);

LeNet_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U714(
    .din0(valIn_36_reg_188),
    .din1(KER_size_0_reg_241),
    .dout(KER_size_1_fu_141_p2)
);

LeNet_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U715(
    .din0(valIn_37_reg_199),
    .din1(KER_size_1_reg_251),
    .dout(KER_bound_fu_145_p2)
);

LeNet_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U716(
    .din0(valIn_40_reg_225),
    .din1(OFM_size_0_reg_246),
    .dout(OFM_size_1_fu_155_p2)
);

LeNet_wrapper_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U717(
    .din0(valIn_35_reg_178),
    .din1(OFM_size_1_reg_267),
    .dout(OFM_bound_fu_159_p2)
);

LeNet_wrapper_regslice_both #(
    .DataWidth( 64 ))
regslice_both_out_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(out_stream_TDATA_int_regslice),
    .vld_in(out_stream_TVALID_int_regslice),
    .ack_in(out_stream_TREADY_int_regslice),
    .data_out(out_stream_TDATA),
    .vld_out(regslice_both_out_stream_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_out_stream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start_reg <= 1'b1;
        end else if ((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_ready == 1'b1)) begin
            grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start_reg <= 1'b1;
        end else if ((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_ready == 1'b1)) begin
            grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        KER_bound_reg_256 <= KER_bound_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((out_stream_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        KER_size_0_reg_241 <= KER_size_0_fu_133_p2;
        OFM_size_0_reg_246 <= OFM_size_0_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        KER_size_1_reg_251 <= KER_size_1_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        OFM_bound_reg_272 <= OFM_bound_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        OFM_size_1_reg_267 <= OFM_size_1_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state1)) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln50_reg_174 <= icmp_ln50_fu_92_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sub56_reg_262 <= sub56_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        sub_reg_278 <= sub_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2)) & (1'b1 == ap_CS_fsm_state2))) begin
        valIn_35_reg_178 <= connect_8_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3)) & (1'b1 == ap_CS_fsm_state3))) begin
        valIn_36_reg_188 <= connect_8_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4)) & (1'b1 == ap_CS_fsm_state4))) begin
        valIn_37_reg_199 <= connect_8_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state6)) & (1'b1 == ap_CS_fsm_state6))) begin
        valIn_39_reg_214 <= connect_8_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state7)) & (1'b1 == ap_CS_fsm_state7))) begin
        valIn_40_reg_225 <= connect_8_dout;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_done == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_done == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_out_stream_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3))) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state6))) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state7))) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state8))) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_stream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_stream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        connect_8_blk_n = connect_8_empty_n;
    end else begin
        connect_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state8)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state7)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state6)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2)) & (1'b1 == ap_CS_fsm_state2)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        connect_8_read = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        connect_8_read = grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_connect_8_read;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        connect_8_read = grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_connect_8_read;
    end else begin
        connect_8_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_stream_TDATA_blk_n = out_stream_TREADY_int_regslice;
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state8) & (1'b1 == ap_CS_fsm_state8))) begin
        out_stream_TDATA_int_regslice = zext_ln48_fu_128_p1;
    end else if (((1'b0 == ap_block_state7) & (1'b1 == ap_CS_fsm_state7))) begin
        out_stream_TDATA_int_regslice = zext_ln43_fu_123_p1;
    end else if (((1'b0 == ap_block_state6) & (1'b1 == ap_CS_fsm_state6))) begin
        out_stream_TDATA_int_regslice = zext_ln38_fu_118_p1;
    end else if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5))) begin
        out_stream_TDATA_int_regslice = zext_ln33_fu_113_p1;
    end else if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        out_stream_TDATA_int_regslice = zext_ln28_fu_108_p1;
    end else if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        out_stream_TDATA_int_regslice = zext_ln23_fu_103_p1;
    end else if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        out_stream_TDATA_int_regslice = zext_ln18_fu_98_p1;
    end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_stream_TDATA_int_regslice = zext_ln13_fu_87_p1;
    end else if (((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        out_stream_TDATA_int_regslice = grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TDATA;
    end else if (((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        out_stream_TDATA_int_regslice = grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TDATA;
    end else begin
        out_stream_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state8)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state7)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state6)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2)) & (1'b1 == ap_CS_fsm_state2)) | (~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_stream_TVALID_int_regslice = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        out_stream_TVALID_int_regslice = grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        out_stream_TVALID_int_regslice = grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TVALID;
    end else begin
        out_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state6)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state7)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state8)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((out_stream_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln50_reg_174 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((out_stream_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln50_reg_174 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((regslice_both_out_stream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((connect_8_empty_n == 1'b0) | (out_stream_TREADY_int_regslice == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((connect_8_empty_n == 1'b0) | (out_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((connect_8_empty_n == 1'b0) | (out_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((connect_8_empty_n == 1'b0) | (out_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((connect_8_empty_n == 1'b0) | (out_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((connect_8_empty_n == 1'b0) | (out_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((connect_8_empty_n == 1'b0) | (out_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((connect_8_empty_n == 1'b0) | (out_stream_TREADY_int_regslice == 1'b0));
end

assign grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start = grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_ap_start_reg;

assign grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_58_1_fu_77_out_stream_TREADY = (out_stream_TREADY_int_regslice & ap_CS_fsm_state17);

assign grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start = grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_ap_start_reg;

assign grp_AXI_DMA_MASTER_Pipeline_VITIS_LOOP_74_2_fu_67_out_stream_TREADY = (out_stream_TREADY_int_regslice & ap_CS_fsm_state13);

assign icmp_ln50_fu_92_p2 = ((connect_8_dout == 32'd0) ? 1'b1 : 1'b0);

assign out_stream_TVALID = regslice_both_out_stream_U_vld_out;

assign sub56_fu_149_p2 = ($signed(KER_bound_reg_256) + $signed(32'd4294967295));

assign sub_fu_163_p2 = ($signed(OFM_bound_reg_272) + $signed(32'd4294967295));

assign zext_ln13_fu_87_p1 = connect_8_dout;

assign zext_ln18_fu_98_p0 = connect_8_dout;

assign zext_ln18_fu_98_p1 = $unsigned(zext_ln18_fu_98_p0);

assign zext_ln23_fu_103_p0 = connect_8_dout;

assign zext_ln23_fu_103_p1 = $unsigned(zext_ln23_fu_103_p0);

assign zext_ln28_fu_108_p0 = connect_8_dout;

assign zext_ln28_fu_108_p1 = $unsigned(zext_ln28_fu_108_p0);

assign zext_ln33_fu_113_p1 = connect_8_dout;

assign zext_ln38_fu_118_p0 = connect_8_dout;

assign zext_ln38_fu_118_p1 = $unsigned(zext_ln38_fu_118_p0);

assign zext_ln43_fu_123_p0 = connect_8_dout;

assign zext_ln43_fu_123_p1 = $unsigned(zext_ln43_fu_123_p0);

assign zext_ln48_fu_128_p1 = connect_8_dout;

endmodule //LeNet_wrapper_AXI_DMA_MASTER
