// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module LeNet_wrapper_pool_2u_20u_24u_Pipeline_VITIS_LOOP_167_11_VITIS_LOOP_168_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        connect_3_din,
        connect_3_num_data_valid,
        connect_3_fifo_cap,
        connect_3_full_n,
        connect_3_write,
        mul_ln138,
        acc_address1,
        acc_ce1,
        acc_we1,
        acc_d1,
        IFMCH_curr_1_load,
        buf_11_address0,
        buf_11_ce0,
        buf_11_q0,
        buf_11_address1,
        buf_11_ce1,
        buf_11_we1,
        buf_11_d1,
        buf_10_address0,
        buf_10_ce0,
        buf_10_q0,
        buf_10_address1,
        buf_10_ce1,
        buf_10_we1,
        buf_10_d1,
        buf_9_address0,
        buf_9_ce0,
        buf_9_q0,
        buf_9_address1,
        buf_9_ce1,
        buf_9_we1,
        buf_9_d1,
        buf_8_address0,
        buf_8_ce0,
        buf_8_q0,
        buf_8_address1,
        buf_8_ce1,
        buf_8_we1,
        buf_8_d1,
        buf_7_address0,
        buf_7_ce0,
        buf_7_q0,
        buf_7_address1,
        buf_7_ce1,
        buf_7_we1,
        buf_7_d1,
        buf_6_address0,
        buf_6_ce0,
        buf_6_q0,
        buf_6_address1,
        buf_6_ce1,
        buf_6_we1,
        buf_6_d1,
        buf_5_address0,
        buf_5_ce0,
        buf_5_q0,
        buf_5_address1,
        buf_5_ce1,
        buf_5_we1,
        buf_5_d1,
        buf_4_address0,
        buf_4_ce0,
        buf_4_q0,
        buf_4_address1,
        buf_4_ce1,
        buf_4_we1,
        buf_4_d1,
        buf_3_address0,
        buf_3_ce0,
        buf_3_q0,
        buf_3_address1,
        buf_3_ce1,
        buf_3_we1,
        buf_3_d1,
        buf_2_address0,
        buf_2_ce0,
        buf_2_q0,
        buf_2_address1,
        buf_2_ce1,
        buf_2_we1,
        buf_2_d1,
        buf_1_address0,
        buf_1_ce0,
        buf_1_q0,
        buf_1_address1,
        buf_1_ce1,
        buf_1_we1,
        buf_1_d1,
        buf_r_address0,
        buf_r_ce0,
        buf_r_q0,
        buf_r_address1,
        buf_r_ce1,
        buf_r_we1,
        buf_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] connect_3_din;
input  [6:0] connect_3_num_data_valid;
input  [6:0] connect_3_fifo_cap;
input   connect_3_full_n;
output   connect_3_write;
input  [62:0] mul_ln138;
output  [4:0] acc_address1;
output   acc_ce1;
output   acc_we1;
output  [31:0] acc_d1;
input  [31:0] IFMCH_curr_1_load;
output  [4:0] buf_11_address0;
output   buf_11_ce0;
input  [31:0] buf_11_q0;
output  [4:0] buf_11_address1;
output   buf_11_ce1;
output   buf_11_we1;
output  [31:0] buf_11_d1;
output  [4:0] buf_10_address0;
output   buf_10_ce0;
input  [31:0] buf_10_q0;
output  [4:0] buf_10_address1;
output   buf_10_ce1;
output   buf_10_we1;
output  [31:0] buf_10_d1;
output  [4:0] buf_9_address0;
output   buf_9_ce0;
input  [31:0] buf_9_q0;
output  [4:0] buf_9_address1;
output   buf_9_ce1;
output   buf_9_we1;
output  [31:0] buf_9_d1;
output  [4:0] buf_8_address0;
output   buf_8_ce0;
input  [31:0] buf_8_q0;
output  [4:0] buf_8_address1;
output   buf_8_ce1;
output   buf_8_we1;
output  [31:0] buf_8_d1;
output  [4:0] buf_7_address0;
output   buf_7_ce0;
input  [31:0] buf_7_q0;
output  [4:0] buf_7_address1;
output   buf_7_ce1;
output   buf_7_we1;
output  [31:0] buf_7_d1;
output  [4:0] buf_6_address0;
output   buf_6_ce0;
input  [31:0] buf_6_q0;
output  [4:0] buf_6_address1;
output   buf_6_ce1;
output   buf_6_we1;
output  [31:0] buf_6_d1;
output  [4:0] buf_5_address0;
output   buf_5_ce0;
input  [31:0] buf_5_q0;
output  [4:0] buf_5_address1;
output   buf_5_ce1;
output   buf_5_we1;
output  [31:0] buf_5_d1;
output  [4:0] buf_4_address0;
output   buf_4_ce0;
input  [31:0] buf_4_q0;
output  [4:0] buf_4_address1;
output   buf_4_ce1;
output   buf_4_we1;
output  [31:0] buf_4_d1;
output  [4:0] buf_3_address0;
output   buf_3_ce0;
input  [31:0] buf_3_q0;
output  [4:0] buf_3_address1;
output   buf_3_ce1;
output   buf_3_we1;
output  [31:0] buf_3_d1;
output  [4:0] buf_2_address0;
output   buf_2_ce0;
input  [31:0] buf_2_q0;
output  [4:0] buf_2_address1;
output   buf_2_ce1;
output   buf_2_we1;
output  [31:0] buf_2_d1;
output  [4:0] buf_1_address0;
output   buf_1_ce0;
input  [31:0] buf_1_q0;
output  [4:0] buf_1_address1;
output   buf_1_ce1;
output   buf_1_we1;
output  [31:0] buf_1_d1;
output  [4:0] buf_r_address0;
output   buf_r_ce0;
input  [31:0] buf_r_q0;
output  [4:0] buf_r_address1;
output   buf_r_ce1;
output   buf_r_we1;
output  [31:0] buf_r_d1;

reg ap_idle;
reg connect_3_write;
reg acc_ce1;
reg acc_we1;
reg buf_11_ce0;
reg buf_11_ce1;
reg buf_11_we1;
reg buf_10_ce0;
reg buf_10_ce1;
reg buf_10_we1;
reg buf_9_ce0;
reg buf_9_ce1;
reg buf_9_we1;
reg buf_8_ce0;
reg buf_8_ce1;
reg buf_8_we1;
reg buf_7_ce0;
reg buf_7_ce1;
reg buf_7_we1;
reg buf_6_ce0;
reg buf_6_ce1;
reg buf_6_we1;
reg buf_5_ce0;
reg buf_5_ce1;
reg buf_5_we1;
reg buf_4_ce0;
reg buf_4_ce1;
reg buf_4_we1;
reg buf_3_ce0;
reg buf_3_ce1;
reg buf_3_we1;
reg buf_2_ce0;
reg buf_2_ce1;
reg buf_2_we1;
reg buf_1_ce0;
reg buf_1_ce1;
reg buf_1_we1;
reg buf_r_ce0;
reg buf_r_ce1;
reg buf_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln167_fu_387_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    connect_3_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] trunc_ln167_fu_431_p1;
reg   [3:0] trunc_ln167_reg_563;
reg   [4:0] buf_addr_reg_568;
reg   [4:0] buf_1_addr_reg_574;
reg   [4:0] buf_2_addr_reg_580;
reg   [4:0] buf_3_addr_reg_586;
reg   [4:0] buf_4_addr_reg_592;
reg   [4:0] buf_5_addr_reg_598;
reg   [4:0] buf_6_addr_reg_604;
reg   [4:0] buf_7_addr_reg_610;
reg   [4:0] buf_8_addr_reg_616;
reg   [4:0] buf_9_addr_reg_622;
reg   [4:0] buf_10_addr_reg_628;
reg   [4:0] buf_11_addr_reg_634;
wire   [31:0] p_0_fu_473_p27;
reg   [31:0] p_0_reg_640;
wire   [63:0] zext_ln168_fu_435_p1;
reg   [31:0] outch_fu_104;
wire   [31:0] add_ln168_fu_452_p2;
wire    ap_loop_init;
reg   [30:0] outpix_fu_108;
wire   [30:0] select_ln167_2_fu_423_p3;
reg   [62:0] indvar_flatten13_fu_112;
wire   [62:0] add_ln167_2_fu_392_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln168_fu_410_p2;
wire   [30:0] add_ln167_fu_404_p2;
wire   [31:0] select_ln167_fu_415_p3;
wire   [31:0] p_0_fu_473_p25;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [3:0] p_0_fu_473_p1;
wire   [3:0] p_0_fu_473_p3;
wire   [3:0] p_0_fu_473_p5;
wire   [3:0] p_0_fu_473_p7;
wire   [3:0] p_0_fu_473_p9;
wire   [3:0] p_0_fu_473_p11;
wire   [3:0] p_0_fu_473_p13;
wire   [3:0] p_0_fu_473_p15;
wire  signed [3:0] p_0_fu_473_p17;
wire  signed [3:0] p_0_fu_473_p19;
wire  signed [3:0] p_0_fu_473_p21;
wire  signed [3:0] p_0_fu_473_p23;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 outch_fu_104 = 32'd0;
#0 outpix_fu_108 = 31'd0;
#0 indvar_flatten13_fu_112 = 63'd0;
#0 ap_done_reg = 1'b0;
end

LeNet_wrapper_sparsemux_25_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_25_4_32_1_1_U196(
    .din0(buf_r_q0),
    .din1(buf_1_q0),
    .din2(buf_2_q0),
    .din3(buf_3_q0),
    .din4(buf_4_q0),
    .din5(buf_5_q0),
    .din6(buf_6_q0),
    .din7(buf_7_q0),
    .din8(buf_8_q0),
    .din9(buf_9_q0),
    .din10(buf_10_q0),
    .din11(buf_11_q0),
    .def(p_0_fu_473_p25),
    .sel(trunc_ln167_reg_563),
    .dout(p_0_fu_473_p27)
);

LeNet_wrapper_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_112 <= 63'd0;
        end else if (((icmp_ln167_fu_387_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten13_fu_112 <= add_ln167_2_fu_392_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outch_fu_104 <= 32'd0;
        end else if (((icmp_ln167_fu_387_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            outch_fu_104 <= add_ln168_fu_452_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outpix_fu_108 <= 31'd0;
        end else if (((icmp_ln167_fu_387_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            outpix_fu_108 <= select_ln167_2_fu_423_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        buf_10_addr_reg_628 <= zext_ln168_fu_435_p1;
        buf_11_addr_reg_634 <= zext_ln168_fu_435_p1;
        buf_1_addr_reg_574 <= zext_ln168_fu_435_p1;
        buf_2_addr_reg_580 <= zext_ln168_fu_435_p1;
        buf_3_addr_reg_586 <= zext_ln168_fu_435_p1;
        buf_4_addr_reg_592 <= zext_ln168_fu_435_p1;
        buf_5_addr_reg_598 <= zext_ln168_fu_435_p1;
        buf_6_addr_reg_604 <= zext_ln168_fu_435_p1;
        buf_7_addr_reg_610 <= zext_ln168_fu_435_p1;
        buf_8_addr_reg_616 <= zext_ln168_fu_435_p1;
        buf_9_addr_reg_622 <= zext_ln168_fu_435_p1;
        buf_addr_reg_568 <= zext_ln168_fu_435_p1;
        trunc_ln167_reg_563 <= trunc_ln167_fu_431_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        p_0_reg_640 <= p_0_fu_473_p27;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_ce1 = 1'b1;
    end else begin
        acc_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln167_fu_387_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_we1 = 1'b1;
    end else begin
        acc_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln167_fu_387_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_10_ce0 = 1'b1;
    end else begin
        buf_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_10_ce1 = 1'b1;
    end else begin
        buf_10_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln167_reg_563 == 4'd10))) begin
        buf_10_we1 = 1'b1;
    end else begin
        buf_10_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_11_ce0 = 1'b1;
    end else begin
        buf_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_11_ce1 = 1'b1;
    end else begin
        buf_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln167_reg_563 == 4'd10) & ~(trunc_ln167_reg_563 == 4'd9) & ~(trunc_ln167_reg_563 == 4'd8) & ~(trunc_ln167_reg_563 == 4'd7) & ~(trunc_ln167_reg_563 == 4'd6) & ~(trunc_ln167_reg_563 == 4'd5) & ~(trunc_ln167_reg_563 == 4'd4) & ~(trunc_ln167_reg_563 == 4'd3) & ~(trunc_ln167_reg_563 == 4'd2) & ~(trunc_ln167_reg_563 == 4'd1) & ~(trunc_ln167_reg_563 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_11_we1 = 1'b1;
    end else begin
        buf_11_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_1_ce0 = 1'b1;
    end else begin
        buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_1_ce1 = 1'b1;
    end else begin
        buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln167_reg_563 == 4'd1))) begin
        buf_1_we1 = 1'b1;
    end else begin
        buf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_2_ce0 = 1'b1;
    end else begin
        buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_2_ce1 = 1'b1;
    end else begin
        buf_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln167_reg_563 == 4'd2))) begin
        buf_2_we1 = 1'b1;
    end else begin
        buf_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_3_ce0 = 1'b1;
    end else begin
        buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_3_ce1 = 1'b1;
    end else begin
        buf_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln167_reg_563 == 4'd3))) begin
        buf_3_we1 = 1'b1;
    end else begin
        buf_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_4_ce0 = 1'b1;
    end else begin
        buf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_4_ce1 = 1'b1;
    end else begin
        buf_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln167_reg_563 == 4'd4))) begin
        buf_4_we1 = 1'b1;
    end else begin
        buf_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_5_ce0 = 1'b1;
    end else begin
        buf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_5_ce1 = 1'b1;
    end else begin
        buf_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln167_reg_563 == 4'd5))) begin
        buf_5_we1 = 1'b1;
    end else begin
        buf_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_6_ce0 = 1'b1;
    end else begin
        buf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_6_ce1 = 1'b1;
    end else begin
        buf_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln167_reg_563 == 4'd6))) begin
        buf_6_we1 = 1'b1;
    end else begin
        buf_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_7_ce0 = 1'b1;
    end else begin
        buf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_7_ce1 = 1'b1;
    end else begin
        buf_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln167_reg_563 == 4'd7))) begin
        buf_7_we1 = 1'b1;
    end else begin
        buf_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_8_ce0 = 1'b1;
    end else begin
        buf_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_8_ce1 = 1'b1;
    end else begin
        buf_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln167_reg_563 == 4'd8))) begin
        buf_8_we1 = 1'b1;
    end else begin
        buf_8_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_9_ce0 = 1'b1;
    end else begin
        buf_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_9_ce1 = 1'b1;
    end else begin
        buf_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln167_reg_563 == 4'd9))) begin
        buf_9_we1 = 1'b1;
    end else begin
        buf_9_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_r_ce1 = 1'b1;
    end else begin
        buf_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln167_reg_563 == 4'd0))) begin
        buf_r_we1 = 1'b1;
    end else begin
        buf_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        connect_3_blk_n = connect_3_full_n;
    end else begin
        connect_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        connect_3_write = 1'b1;
    end else begin
        connect_3_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_address1 = zext_ln168_fu_435_p1;

assign acc_d1 = 32'd4293967297;

assign add_ln167_2_fu_392_p2 = (indvar_flatten13_fu_112 + 63'd1);

assign add_ln167_fu_404_p2 = (outpix_fu_108 + 31'd1);

assign add_ln168_fu_452_p2 = (select_ln167_fu_415_p3 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (connect_3_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign buf_10_address0 = zext_ln168_fu_435_p1;

assign buf_10_address1 = buf_10_addr_reg_628;

assign buf_10_d1 = 32'd4293967297;

assign buf_11_address0 = zext_ln168_fu_435_p1;

assign buf_11_address1 = buf_11_addr_reg_634;

assign buf_11_d1 = 32'd4293967297;

assign buf_1_address0 = zext_ln168_fu_435_p1;

assign buf_1_address1 = buf_1_addr_reg_574;

assign buf_1_d1 = 32'd4293967297;

assign buf_2_address0 = zext_ln168_fu_435_p1;

assign buf_2_address1 = buf_2_addr_reg_580;

assign buf_2_d1 = 32'd4293967297;

assign buf_3_address0 = zext_ln168_fu_435_p1;

assign buf_3_address1 = buf_3_addr_reg_586;

assign buf_3_d1 = 32'd4293967297;

assign buf_4_address0 = zext_ln168_fu_435_p1;

assign buf_4_address1 = buf_4_addr_reg_592;

assign buf_4_d1 = 32'd4293967297;

assign buf_5_address0 = zext_ln168_fu_435_p1;

assign buf_5_address1 = buf_5_addr_reg_598;

assign buf_5_d1 = 32'd4293967297;

assign buf_6_address0 = zext_ln168_fu_435_p1;

assign buf_6_address1 = buf_6_addr_reg_604;

assign buf_6_d1 = 32'd4293967297;

assign buf_7_address0 = zext_ln168_fu_435_p1;

assign buf_7_address1 = buf_7_addr_reg_610;

assign buf_7_d1 = 32'd4293967297;

assign buf_8_address0 = zext_ln168_fu_435_p1;

assign buf_8_address1 = buf_8_addr_reg_616;

assign buf_8_d1 = 32'd4293967297;

assign buf_9_address0 = zext_ln168_fu_435_p1;

assign buf_9_address1 = buf_9_addr_reg_622;

assign buf_9_d1 = 32'd4293967297;

assign buf_r_address0 = zext_ln168_fu_435_p1;

assign buf_r_address1 = buf_addr_reg_568;

assign buf_r_d1 = 32'd4293967297;

assign connect_3_din = p_0_reg_640;

assign icmp_ln167_fu_387_p2 = ((indvar_flatten13_fu_112 == mul_ln138) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_410_p2 = ((outch_fu_104 == IFMCH_curr_1_load) ? 1'b1 : 1'b0);

assign p_0_fu_473_p25 = 'bx;

assign select_ln167_2_fu_423_p3 = ((icmp_ln168_fu_410_p2[0:0] == 1'b1) ? add_ln167_fu_404_p2 : outpix_fu_108);

assign select_ln167_fu_415_p3 = ((icmp_ln168_fu_410_p2[0:0] == 1'b1) ? 32'd0 : outch_fu_104);

assign trunc_ln167_fu_431_p1 = select_ln167_2_fu_423_p3[3:0];

assign zext_ln168_fu_435_p1 = select_ln167_fu_415_p3;

endmodule //LeNet_wrapper_pool_2u_20u_24u_Pipeline_VITIS_LOOP_167_11_VITIS_LOOP_168_12
